
timers-test-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003190  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003330  08003330  00004330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800338c  0800338c  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800338c  0800338c  0000438c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003394  08003394  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003394  08003394  00004394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003398  08003398  00004398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800339c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000006c  08003408  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003408  00005224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000942f  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a25  00000000  00000000  0000e4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0000fef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e9  00000000  00000000  00010948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016da8  00000000  00000000  00011131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b68e  00000000  00000000  00027ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8e6  00000000  00000000  00033567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0e4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e4  00000000  00000000  000c0e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000c4074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003318 	.word	0x08003318

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003318 	.word	0x08003318

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <button>:
 * @param ui32Pin  Pin number on designated port from the gpio.h pin definitions (GPIO\_PIN\_X) 
 * @param active_state can be either 0 or 1, and it determines if the button is active upon logical zero or logical one
 * @return 255 if the pin was in the active state for given period, 0 otherwise
 */
uint16_t button(GPIO_TypeDef* ui32Port, uint16_t ui16Pin, uint16_t active_state)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
 80005b8:	4613      	mov	r3, r2
 80005ba:	803b      	strh	r3, [r7, #0]
    //lê o botão 'tries' vezes durante 'time' milissegundos
    //o botão deve passar pelo menos a metade final do período em active_state
    uint32_t i,tries = 5;
 80005bc:	2305      	movs	r3, #5
 80005be:	60fb      	str	r3, [r7, #12]
    uint8_t pressed = 0, unpressed = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	74fb      	strb	r3, [r7, #19]
 80005c4:	2300      	movs	r3, #0
 80005c6:	74bb      	strb	r3, [r7, #18]
    uint16_t ret = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	823b      	strh	r3, [r7, #16]
    
    
    for(i=0;i<tries;i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	e018      	b.n	8000604 <button+0x58>
    {
        
        if(HAL_GPIO_ReadPin(ui32Port,ui16Pin))
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 fecc 	bl	8001374 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <button+0x42>
        {
            pressed++;
 80005e2:	7cfb      	ldrb	r3, [r7, #19]
 80005e4:	3301      	adds	r3, #1
 80005e6:	74fb      	strb	r3, [r7, #19]
            unpressed=0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	74bb      	strb	r3, [r7, #18]
 80005ec:	e004      	b.n	80005f8 <button+0x4c>
        }
        else
        {
            unpressed++;
 80005ee:	7cbb      	ldrb	r3, [r7, #18]
 80005f0:	3301      	adds	r3, #1
 80005f2:	74bb      	strb	r3, [r7, #18]
            pressed = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	74fb      	strb	r3, [r7, #19]
        }
        HAL_Delay(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fc01 	bl	8000e00 <HAL_Delay>
    for(i=0;i<tries;i++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3e2      	bcc.n	80005d2 <button+0x26>
    }
    if(active_state)
 800060c:	883b      	ldrh	r3, [r7, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d007      	beq.n	8000622 <button+0x76>
    {
        if (pressed>(tries/2))
 8000612:	7cfa      	ldrb	r2, [r7, #19]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	085b      	lsrs	r3, r3, #1
 8000618:	429a      	cmp	r2, r3
 800061a:	d909      	bls.n	8000630 <button+0x84>
        {
            ret = 0xFF;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	823b      	strh	r3, [r7, #16]
 8000620:	e006      	b.n	8000630 <button+0x84>
        }
    }
    else
    {
        if (unpressed>(tries/2))
 8000622:	7cba      	ldrb	r2, [r7, #18]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	085b      	lsrs	r3, r3, #1
 8000628:	429a      	cmp	r2, r3
 800062a:	d901      	bls.n	8000630 <button+0x84>
        {
            ret = 0xFF;
 800062c:	23ff      	movs	r3, #255	@ 0xff
 800062e:	823b      	strh	r3, [r7, #16]
        }
    }    
    return ret;
 8000630:	8a3b      	ldrh	r3, [r7, #16]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <button_release>:
 * @param ui32Pin  Pin number on designated port from the gpio.h pin definitions (GPIO\_PIN\_X) 
 * @param active_state can be either 0 or 1, and it determines if the button is active upon logical zero or logical one
 * @return 255 if the pin was in the active state for given period and then released, 0 otherwise
 */
uint16_t button_release(GPIO_TypeDef* ui32Port, uint16_t ui16Pin, uint16_t active_state)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	807b      	strh	r3, [r7, #2]
 8000646:	4613      	mov	r3, r2
 8000648:	803b      	strh	r3, [r7, #0]
    if(button(ui32Port,ui16Pin,active_state))
 800064a:	883a      	ldrh	r2, [r7, #0]
 800064c:	887b      	ldrh	r3, [r7, #2]
 800064e:	4619      	mov	r1, r3
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ffab 	bl	80005ac <button>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d017      	beq.n	800068c <button_release+0x52>
    {
        if(active_state)
 800065c:	883b      	ldrh	r3, [r7, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d009      	beq.n	8000676 <button_release+0x3c>
        {
            while (HAL_GPIO_ReadPin(ui32Port, ui16Pin))
 8000662:	bf00      	nop
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	4619      	mov	r1, r3
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 fe83 	bl	8001374 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f7      	bne.n	8000664 <button_release+0x2a>
 8000674:	e008      	b.n	8000688 <button_release+0x4e>
                ;
        }
        else
        {
            while (!HAL_GPIO_ReadPin(ui32Port, ui16Pin))
 8000676:	bf00      	nop
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	4619      	mov	r1, r3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 fe79 	bl	8001374 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f7      	beq.n	8000678 <button_release+0x3e>
                ;
        }
        return 0xFF;
 8000688:	23ff      	movs	r3, #255	@ 0xff
 800068a:	e000      	b.n	800068e <button_release+0x54>
    }
    else
    {
        return 0;
 800068c:	2300      	movs	r3, #0
    }    
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 fb3e 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f866 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f91a 	bl	80008dc <MX_GPIO_Init>
  MX_TIM4_Init();
 80006a8:	f000 f8ca 	bl	8000840 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim4);
 80006ac:	4829      	ldr	r0, [pc, #164]	@ (8000754 <main+0xbc>)
 80006ae:	f001 fb21 	bl	8001cf4 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf("%i", addCounter);
	  //HAL_Delay(1000);
	  	  if (button_release(GPIOB, GPIO_PIN_12, 1) && (addCounter <= 65535 - 1030))
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b8:	4827      	ldr	r0, [pc, #156]	@ (8000758 <main+0xc0>)
 80006ba:	f7ff ffbe 	bl	800063a <button_release>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d01a      	beq.n	80006fa <main+0x62>
 80006c4:	4b25      	ldr	r3, [pc, #148]	@ (800075c <main+0xc4>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	f64f 32f9 	movw	r2, #64505	@ 0xfbf9
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d813      	bhi.n	80006fa <main+0x62>
	  	    {
	  		  addCounter = addCounter + 1030;
 80006d2:	4b22      	ldr	r3, [pc, #136]	@ (800075c <main+0xc4>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <main+0xc4>)
 80006e0:	801a      	strh	r2, [r3, #0]
	  		  TIM4->ARR = addCounter;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <main+0xc4>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <main+0xc8>)
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	  		  TIM4->EGR = TIM_EGR_UG;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <main+0xc8>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	615a      	str	r2, [r3, #20]
	  		  printf("pressed 1");
 80006f2:	481c      	ldr	r0, [pc, #112]	@ (8000764 <main+0xcc>)
 80006f4:	f001 ffa4 	bl	8002640 <iprintf>
 80006f8:	e022      	b.n	8000740 <main+0xa8>
	  	    } else if (button_release(GPIOB, GPIO_PIN_13, 1) && (addCounter > 1030)){
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000700:	4815      	ldr	r0, [pc, #84]	@ (8000758 <main+0xc0>)
 8000702:	f7ff ff9a 	bl	800063a <button_release>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d019      	beq.n	8000740 <main+0xa8>
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <main+0xc4>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	b29b      	uxth	r3, r3
 8000712:	f240 4206 	movw	r2, #1030	@ 0x406
 8000716:	4293      	cmp	r3, r2
 8000718:	d912      	bls.n	8000740 <main+0xa8>
	  	    	addCounter = addCounter - 1030;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <main+0xc4>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	b29b      	uxth	r3, r3
 8000720:	f2a3 4306 	subw	r3, r3, #1030	@ 0x406
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <main+0xc4>)
 8000728:	801a      	strh	r2, [r3, #0]
	  	    	TIM4->ARR = addCounter;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <main+0xc4>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <main+0xc8>)
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
	  	    	TIM4->EGR = TIM_EGR_UG;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <main+0xc8>)
 8000736:	2201      	movs	r2, #1
 8000738:	615a      	str	r2, [r3, #20]
	  	    	printf("pressed 2");
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <main+0xd0>)
 800073c:	f001 ff80 	bl	8002640 <iprintf>
	  	    }

	  	    HAL_Delay(200);
 8000740:	20c8      	movs	r0, #200	@ 0xc8
 8000742:	f000 fb5d 	bl	8000e00 <HAL_Delay>
	  	    //TIM4->ARR = addCounter;
	  	    // pisca o led da placa
	  	    HAL_GPIO_TogglePin(LED_KIT_GPIO_Port, LED_KIT_Pin);
 8000746:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800074a:	4808      	ldr	r0, [pc, #32]	@ (800076c <main+0xd4>)
 800074c:	f000 fe43 	bl	80013d6 <HAL_GPIO_TogglePin>
	  	  if (button_release(GPIOB, GPIO_PIN_12, 1) && (addCounter <= 65535 - 1030))
 8000750:	e7af      	b.n	80006b2 <main+0x1a>
 8000752:	bf00      	nop
 8000754:	20000088 	.word	0x20000088
 8000758:	40020400 	.word	0x40020400
 800075c:	20000002 	.word	0x20000002
 8000760:	40000800 	.word	0x40000800
 8000764:	08003330 	.word	0x08003330
 8000768:	0800333c 	.word	0x0800333c
 800076c:	40020800 	.word	0x40020800

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	@ 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 ffb3 	bl	80026ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <SystemClock_Config+0xc8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	4a26      	ldr	r2, [pc, #152]	@ (8000838 <SystemClock_Config+0xc8>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a4:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <SystemClock_Config+0xc8>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a20      	ldr	r2, [pc, #128]	@ (800083c <SystemClock_Config+0xcc>)
 80007ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <SystemClock_Config+0xcc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e0:	2310      	movs	r3, #16
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007e4:	23c0      	movs	r3, #192	@ 0xc0
 80007e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fe09 	bl	800140c <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000800:	f000 f91c 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2103      	movs	r1, #3
 8000820:	4618      	mov	r0, r3
 8000822:	f001 f86b 	bl	80018fc <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800082c:	f000 f906 	bl	8000a3c <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	@ 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800085c:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <MX_TIM4_Init+0x94>)
 800085e:	4a1e      	ldr	r2, [pc, #120]	@ (80008d8 <MX_TIM4_Init+0x98>)
 8000860:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9600-1;
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_TIM4_Init+0x94>)
 8000864:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000868:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_TIM4_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1030;
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <MX_TIM4_Init+0x94>)
 8000872:	f240 4206 	movw	r2, #1030	@ 0x406
 8000876:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_TIM4_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_TIM4_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000884:	4813      	ldr	r0, [pc, #76]	@ (80008d4 <MX_TIM4_Init+0x94>)
 8000886:	f001 f9e5 	bl	8001c54 <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000890:	f000 f8d4 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <MX_TIM4_Init+0x94>)
 80008a2:	f001 fb79 	bl	8001f98 <HAL_TIM_ConfigClockSource>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008ac:	f000 f8c6 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_TIM4_Init+0x94>)
 80008be:	f001 fd7b 	bl	80023b8 <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008c8:	f000 f8b8 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  //volatile tim4.Init.Period = 1030;
  /* USER CODE END TIM4_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000088 	.word	0x20000088
 80008d8:	40000800 	.word	0x40000800

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b37      	ldr	r3, [pc, #220]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a36      	ldr	r2, [pc, #216]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b34      	ldr	r3, [pc, #208]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a2f      	ldr	r2, [pc, #188]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a28      	ldr	r2, [pc, #160]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_GPIO_Init+0xf8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_KIT_GPIO_Port, LED_KIT_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000968:	481b      	ldr	r0, [pc, #108]	@ (80009d8 <MX_GPIO_Init+0xfc>)
 800096a:	f000 fd1b 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 800096e:	2200      	movs	r2, #0
 8000970:	21f8      	movs	r1, #248	@ 0xf8
 8000972:	481a      	ldr	r0, [pc, #104]	@ (80009dc <MX_GPIO_Init+0x100>)
 8000974:	f000 fd16 	bl	80013a4 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_KIT_Pin */
  GPIO_InitStruct.Pin = LED_KIT_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_KIT_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_GPIO_Init+0xfc>)
 8000992:	f000 fb6b 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000996:	23f8      	movs	r3, #248	@ 0xf8
 8000998:	617b      	str	r3, [r7, #20]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <MX_GPIO_Init+0x100>)
 80009ae:	f000 fb5d 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80009b2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <MX_GPIO_Init+0x104>)
 80009c8:	f000 fb50 	bl	800106c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	@ 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020000 	.word	0x40020000
 80009e0:	40020400 	.word	0x40020400

080009e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim4){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA,3);
    leds = (leds - 1) & 0x1F;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	3b01      	subs	r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f003 031f 	and.w	r3, r3, #31
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009fe:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, (~leds)<<3, GPIO_PIN_RESET);
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a14:	f000 fcc6 	bl	80013a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, leds<<3, GPIO_PIN_SET);
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a28:	f000 fcbc 	bl	80013a4 <HAL_GPIO_WritePin>
    //Teste de led
    //HAL_GPIO_WritePin(GPIOA,4,1);

 }
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000000 	.word	0x20000000
 8000a38:	40020000 	.word	0x40020000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x48>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d115      	bne.n	8000ad6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	201e      	movs	r0, #30
 8000acc:	f000 fa97 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ad0:	201e      	movs	r0, #30
 8000ad2:	f000 fab0 	bl	8001036 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40000800 	.word	0x40000800
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 f93f 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <TIM4_IRQHandler+0x10>)
 8000b4e:	f001 f933 	bl	8001db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000088 	.word	0x20000088

08000b5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00a      	b.n	8000b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b6e:	f3af 8000 	nop.w
 8000b72:	4601      	mov	r1, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf0      	blt.n	8000b6e <_read+0x12>
  }

  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e009      	b.n	8000bbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf1      	blt.n	8000ba8 <_write+0x12>
  }
  return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_close>:

int _close(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <_isatty>:

int _isatty(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f001 fd8e 	bl	8002788 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20020000 	.word	0x20020000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	200000d0 	.word	0x200000d0
 8000ca0:	20000228 	.word	0x20000228

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f001 fd4d 	bl	8002794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fccd 	bl	8000698 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d0c:	0800339c 	.word	0x0800339c
  ldr r2, =_sbss
 8000d10:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d14:	20000224 	.word	0x20000224

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f94f 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fe7a 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f967 	bl	8001052 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f92f 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000004 	.word	0x20000004
 8000db8:	2000000c 	.word	0x2000000c
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	200000d4 	.word	0x200000d4

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200000d4 	.word	0x200000d4

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_Delay+0x44>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000000c 	.word	0x2000000c

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	@ (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	@ (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	@ 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e159      	b.n	800133c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8148 	bne.w	8001336 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d130      	bne.n	8001120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80a2 	beq.w	8001336 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b57      	ldr	r3, [pc, #348]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a56      	ldr	r2, [pc, #344]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b54      	ldr	r3, [pc, #336]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120e:	4a52      	ldr	r2, [pc, #328]	@ (8001358 <HAL_GPIO_Init+0x2ec>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a49      	ldr	r2, [pc, #292]	@ (800135c <HAL_GPIO_Init+0x2f0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x202>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a48      	ldr	r2, [pc, #288]	@ (8001360 <HAL_GPIO_Init+0x2f4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x1fe>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a47      	ldr	r2, [pc, #284]	@ (8001364 <HAL_GPIO_Init+0x2f8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x1fa>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a46      	ldr	r2, [pc, #280]	@ (8001368 <HAL_GPIO_Init+0x2fc>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x1f6>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a45      	ldr	r2, [pc, #276]	@ (800136c <HAL_GPIO_Init+0x300>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x1f2>
 800125a:	2304      	movs	r3, #4
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x204>
 800125e:	2307      	movs	r3, #7
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x204>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x204>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x204>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x204>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	@ (8001358 <HAL_GPIO_Init+0x2ec>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128e:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <HAL_GPIO_Init+0x304>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001370 <HAL_GPIO_Init+0x304>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <HAL_GPIO_Init+0x304>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012dc:	4a24      	ldr	r2, [pc, #144]	@ (8001370 <HAL_GPIO_Init+0x304>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <HAL_GPIO_Init+0x304>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001306:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <HAL_GPIO_Init+0x304>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_GPIO_Init+0x304>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001330:	4a0f      	ldr	r2, [pc, #60]	@ (8001370 <HAL_GPIO_Init+0x304>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f aea2 	bls.w	8001088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3724      	adds	r7, #36	@ 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e267      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d075      	beq.n	8001516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800142a:	4b88      	ldr	r3, [pc, #544]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b04      	cmp	r3, #4
 8001434:	d00c      	beq.n	8001450 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001436:	4b85      	ldr	r3, [pc, #532]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800143e:	2b08      	cmp	r3, #8
 8001440:	d112      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001442:	4b82      	ldr	r3, [pc, #520]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800144a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800144e:	d10b      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	4b7e      	ldr	r3, [pc, #504]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d05b      	beq.n	8001514 <HAL_RCC_OscConfig+0x108>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d157      	bne.n	8001514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e242      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x74>
 8001472:	4b76      	ldr	r3, [pc, #472]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a75      	ldr	r2, [pc, #468]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x98>
 800148a:	4b70      	ldr	r3, [pc, #448]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a6f      	ldr	r2, [pc, #444]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b6d      	ldr	r3, [pc, #436]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6c      	ldr	r2, [pc, #432]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 80014a4:	4b69      	ldr	r3, [pc, #420]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a68      	ldr	r2, [pc, #416]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a65      	ldr	r2, [pc, #404]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc90 	bl	8000de8 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fc8c 	bl	8000de8 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	@ 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e207      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b5b      	ldr	r3, [pc, #364]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xc0>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc7c 	bl	8000de8 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fc78 	bl	8000de8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	@ 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e1f3      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	4b51      	ldr	r3, [pc, #324]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0xe8>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d063      	beq.n	80015ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001522:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152e:	4b47      	ldr	r3, [pc, #284]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001536:	2b08      	cmp	r3, #8
 8001538:	d11c      	bne.n	8001574 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153a:	4b44      	ldr	r3, [pc, #272]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	4b41      	ldr	r3, [pc, #260]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x152>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e1c7      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4937      	ldr	r1, [pc, #220]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	e03a      	b.n	80015ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b34      	ldr	r3, [pc, #208]	@ (8001650 <HAL_RCC_OscConfig+0x244>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fc31 	bl	8000de8 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fc2d 	bl	8000de8 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1a8      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b28      	ldr	r3, [pc, #160]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4925      	ldr	r1, [pc, #148]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e015      	b.n	80015ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <HAL_RCC_OscConfig+0x244>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc10 	bl	8000de8 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fc0c 	bl	8000de8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e187      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d036      	beq.n	8001664 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d016      	beq.n	800162c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_RCC_OscConfig+0x248>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fbf0 	bl	8000de8 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fbec 	bl	8000de8 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e167      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_RCC_OscConfig+0x240>)
 8001620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x200>
 800162a:	e01b      	b.n	8001664 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <HAL_RCC_OscConfig+0x248>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fbd9 	bl	8000de8 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	e00e      	b.n	8001658 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff fbd5 	bl	8000de8 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d907      	bls.n	8001658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e150      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
 800164c:	40023800 	.word	0x40023800
 8001650:	42470000 	.word	0x42470000
 8001654:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b88      	ldr	r3, [pc, #544]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 800165a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ea      	bne.n	800163a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8097 	beq.w	80017a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001676:	4b81      	ldr	r3, [pc, #516]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10f      	bne.n	80016a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b7d      	ldr	r3, [pc, #500]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a7c      	ldr	r2, [pc, #496]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b7a      	ldr	r3, [pc, #488]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b77      	ldr	r3, [pc, #476]	@ (8001880 <HAL_RCC_OscConfig+0x474>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d118      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ae:	4b74      	ldr	r3, [pc, #464]	@ (8001880 <HAL_RCC_OscConfig+0x474>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a73      	ldr	r2, [pc, #460]	@ (8001880 <HAL_RCC_OscConfig+0x474>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb95 	bl	8000de8 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff fb91 	bl	8000de8 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e10c      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001880 <HAL_RCC_OscConfig+0x474>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x2ea>
 80016e8:	4b64      	ldr	r3, [pc, #400]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ec:	4a63      	ldr	r2, [pc, #396]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f4:	e01c      	b.n	8001730 <HAL_RCC_OscConfig+0x324>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x30c>
 80016fe:	4b5f      	ldr	r3, [pc, #380]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	4a5e      	ldr	r2, [pc, #376]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6713      	str	r3, [r2, #112]	@ 0x70
 800170a:	4b5c      	ldr	r3, [pc, #368]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170e:	4a5b      	ldr	r2, [pc, #364]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6713      	str	r3, [r2, #112]	@ 0x70
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0x324>
 8001718:	4b58      	ldr	r3, [pc, #352]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171c:	4a57      	ldr	r2, [pc, #348]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	@ 0x70
 8001724:	4b55      	ldr	r3, [pc, #340]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001728:	4a54      	ldr	r2, [pc, #336]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 0304 	bic.w	r3, r3, #4
 800172e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d015      	beq.n	8001764 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fb56 	bl	8000de8 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	e00a      	b.n	8001756 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff fb52 	bl	8000de8 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0cb      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	4b49      	ldr	r3, [pc, #292]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0ee      	beq.n	8001740 <HAL_RCC_OscConfig+0x334>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff fb40 	bl	8000de8 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff fb3c 	bl	8000de8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0b5      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001782:	4b3e      	ldr	r3, [pc, #248]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ee      	bne.n	800176c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b39      	ldr	r3, [pc, #228]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	4a38      	ldr	r2, [pc, #224]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a1 	beq.w	80018ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d05c      	beq.n	8001870 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d141      	bne.n	8001842 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b31      	ldr	r3, [pc, #196]	@ (8001884 <HAL_RCC_OscConfig+0x478>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb10 	bl	8000de8 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fb0c 	bl	8000de8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e087      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	4b27      	ldr	r3, [pc, #156]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	3b01      	subs	r3, #1
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	491b      	ldr	r1, [pc, #108]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001814:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <HAL_RCC_OscConfig+0x478>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fae5 	bl	8000de8 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff fae1 	bl	8000de8 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e05c      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x416>
 8001840:	e054      	b.n	80018ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <HAL_RCC_OscConfig+0x478>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff face 	bl	8000de8 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff faca 	bl	8000de8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e045      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_RCC_OscConfig+0x470>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x444>
 800186e:	e03d      	b.n	80018ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d107      	bne.n	8001888 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e038      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000
 8001884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_RCC_OscConfig+0x4ec>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d028      	beq.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d121      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d11a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018b8:	4013      	ands	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	085b      	lsrs	r3, r3, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0cc      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b68      	ldr	r3, [pc, #416]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d90c      	bls.n	8001938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b65      	ldr	r3, [pc, #404]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b63      	ldr	r3, [pc, #396]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b59      	ldr	r3, [pc, #356]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a58      	ldr	r2, [pc, #352]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800195a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b50      	ldr	r3, [pc, #320]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	494d      	ldr	r1, [pc, #308]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d044      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d119      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e06f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e067      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b37      	ldr	r3, [pc, #220]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4934      	ldr	r1, [pc, #208]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f9fc 	bl	8000de8 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f9f8 	bl	8000de8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e04f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d20c      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e032      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4916      	ldr	r1, [pc, #88]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	490e      	ldr	r1, [pc, #56]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a82:	f000 f821 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	490a      	ldr	r1, [pc, #40]	@ (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f95c 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08003348 	.word	0x08003348
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001acc:	b090      	sub	sp, #64	@ 0x40
 8001ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae0:	4b59      	ldr	r3, [pc, #356]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d00d      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x40>
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	f200 80a1 	bhi.w	8001c34 <HAL_RCC_GetSysClockFreq+0x16c>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x34>
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001afa:	e09b      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b53      	ldr	r3, [pc, #332]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001afe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b00:	e09b      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b02:	4b53      	ldr	r3, [pc, #332]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b06:	e098      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b08:	4b4f      	ldr	r3, [pc, #316]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b12:	4b4d      	ldr	r3, [pc, #308]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d028      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	2200      	movs	r2, #0
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b30:	2100      	movs	r1, #0
 8001b32:	4b47      	ldr	r3, [pc, #284]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b34:	fb03 f201 	mul.w	r2, r3, r1
 8001b38:	2300      	movs	r3, #0
 8001b3a:	fb00 f303 	mul.w	r3, r0, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a43      	ldr	r2, [pc, #268]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b42:	fba0 1202 	umull	r1, r2, r0, r2
 8001b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b48:	460a      	mov	r2, r1
 8001b4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b4e:	4413      	add	r3, r2
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b54:	2200      	movs	r2, #0
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	61fa      	str	r2, [r7, #28]
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b62:	f7fe fb8d 	bl	8000280 <__aeabi_uldivmod>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b6e:	e053      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b70:	4b35      	ldr	r3, [pc, #212]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	2200      	movs	r2, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	617a      	str	r2, [r7, #20]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b82:	f04f 0b00 	mov.w	fp, #0
 8001b86:	4652      	mov	r2, sl
 8001b88:	465b      	mov	r3, fp
 8001b8a:	f04f 0000 	mov.w	r0, #0
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	0159      	lsls	r1, r3, #5
 8001b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b98:	0150      	lsls	r0, r2, #5
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	ebb2 080a 	subs.w	r8, r2, sl
 8001ba2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bba:	ebb2 0408 	subs.w	r4, r2, r8
 8001bbe:	eb63 0509 	sbc.w	r5, r3, r9
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	00eb      	lsls	r3, r5, #3
 8001bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd0:	00e2      	lsls	r2, r4, #3
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	eb14 030a 	adds.w	r3, r4, sl
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	eb45 030b 	adc.w	r3, r5, fp
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bee:	4629      	mov	r1, r5
 8001bf0:	028b      	lsls	r3, r1, #10
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	028a      	lsls	r2, r1, #10
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c02:	2200      	movs	r2, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	60fa      	str	r2, [r7, #12]
 8001c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c0c:	f7fe fb38 	bl	8000280 <__aeabi_uldivmod>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4613      	mov	r3, r2
 8001c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	3301      	adds	r3, #1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c32:	e002      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3740      	adds	r7, #64	@ 0x40
 8001c40:	46bd      	mov	sp, r7
 8001c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	017d7840 	.word	0x017d7840

08001c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e041      	b.n	8001cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe ff0c 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f000 fa70 	bl	8002178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d001      	beq.n	8001d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e044      	b.n	8001d96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1e      	ldr	r2, [pc, #120]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d018      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x6c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d36:	d013      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x6c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00e      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x6c>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <HAL_TIM_Base_Start_IT+0xb8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x6c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a17      	ldr	r2, [pc, #92]	@ (8001db0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x6c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a16      	ldr	r2, [pc, #88]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d111      	bne.n	8001d84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d010      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d82:	e007      	b.n	8001d94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40000400 	.word	0x40000400
 8001dac:	40000800 	.word	0x40000800
 8001db0:	40000c00 	.word	0x40000c00
 8001db4:	40014000 	.word	0x40014000

08001db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0202 	mvn.w	r2, #2
 8001dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f999 	bl	800213a <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f98b 	bl	8002126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f99c 	bl	800214e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d020      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0204 	mvn.w	r2, #4
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f973 	bl	800213a <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f965 	bl	8002126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f976 	bl	800214e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d020      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0208 	mvn.w	r2, #8
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f94d 	bl	800213a <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f93f 	bl	8002126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f950 	bl	800214e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d020      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0210 	mvn.w	r2, #16
 8001ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f927 	bl	800213a <HAL_TIM_IC_CaptureCallback>
 8001eec:	e005      	b.n	8001efa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f919 	bl	8002126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f92a 	bl	800214e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0201 	mvn.w	r2, #1
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fd60 	bl	80009e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fab0 	bl	80024a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8fb 	bl	8002162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0220 	mvn.w	r2, #32
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fa82 	bl	8002494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_TIM_ConfigClockSource+0x1c>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e0b4      	b.n	800211e <HAL_TIM_ConfigClockSource+0x186>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fec:	d03e      	beq.n	800206c <HAL_TIM_ConfigClockSource+0xd4>
 8001fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ff2:	f200 8087 	bhi.w	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8001ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ffa:	f000 8086 	beq.w	800210a <HAL_TIM_ConfigClockSource+0x172>
 8001ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002002:	d87f      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8002004:	2b70      	cmp	r3, #112	@ 0x70
 8002006:	d01a      	beq.n	800203e <HAL_TIM_ConfigClockSource+0xa6>
 8002008:	2b70      	cmp	r3, #112	@ 0x70
 800200a:	d87b      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 800200c:	2b60      	cmp	r3, #96	@ 0x60
 800200e:	d050      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002010:	2b60      	cmp	r3, #96	@ 0x60
 8002012:	d877      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8002014:	2b50      	cmp	r3, #80	@ 0x50
 8002016:	d03c      	beq.n	8002092 <HAL_TIM_ConfigClockSource+0xfa>
 8002018:	2b50      	cmp	r3, #80	@ 0x50
 800201a:	d873      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 800201c:	2b40      	cmp	r3, #64	@ 0x40
 800201e:	d058      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002020:	2b40      	cmp	r3, #64	@ 0x40
 8002022:	d86f      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8002024:	2b30      	cmp	r3, #48	@ 0x30
 8002026:	d064      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002028:	2b30      	cmp	r3, #48	@ 0x30
 800202a:	d86b      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 800202c:	2b20      	cmp	r3, #32
 800202e:	d060      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002030:	2b20      	cmp	r3, #32
 8002032:	d867      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05c      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002038:	2b10      	cmp	r3, #16
 800203a:	d05a      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x15a>
 800203c:	e062      	b.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800204e:	f000 f993 	bl	8002378 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	609a      	str	r2, [r3, #8]
      break;
 800206a:	e04f      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800207c:	f000 f97c 	bl	8002378 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800208e:	609a      	str	r2, [r3, #8]
      break;
 8002090:	e03c      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800209e:	461a      	mov	r2, r3
 80020a0:	f000 f8f0 	bl	8002284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2150      	movs	r1, #80	@ 0x50
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f949 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 80020b0:	e02c      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020be:	461a      	mov	r2, r3
 80020c0:	f000 f90f 	bl	80022e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2160      	movs	r1, #96	@ 0x60
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f939 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 80020d0:	e01c      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020de:	461a      	mov	r2, r3
 80020e0:	f000 f8d0 	bl	8002284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2140      	movs	r1, #64	@ 0x40
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f929 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 80020f0:	e00c      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f000 f920 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 8002102:	e003      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      break;
 8002108:	e000      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800210a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a37      	ldr	r2, [pc, #220]	@ (8002268 <TIM_Base_SetConfig+0xf0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00f      	beq.n	80021b0 <TIM_Base_SetConfig+0x38>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002196:	d00b      	beq.n	80021b0 <TIM_Base_SetConfig+0x38>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a34      	ldr	r2, [pc, #208]	@ (800226c <TIM_Base_SetConfig+0xf4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d007      	beq.n	80021b0 <TIM_Base_SetConfig+0x38>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a33      	ldr	r2, [pc, #204]	@ (8002270 <TIM_Base_SetConfig+0xf8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d003      	beq.n	80021b0 <TIM_Base_SetConfig+0x38>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a32      	ldr	r2, [pc, #200]	@ (8002274 <TIM_Base_SetConfig+0xfc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d108      	bne.n	80021c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a28      	ldr	r2, [pc, #160]	@ (8002268 <TIM_Base_SetConfig+0xf0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01b      	beq.n	8002202 <TIM_Base_SetConfig+0x8a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d0:	d017      	beq.n	8002202 <TIM_Base_SetConfig+0x8a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a25      	ldr	r2, [pc, #148]	@ (800226c <TIM_Base_SetConfig+0xf4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <TIM_Base_SetConfig+0x8a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a24      	ldr	r2, [pc, #144]	@ (8002270 <TIM_Base_SetConfig+0xf8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00f      	beq.n	8002202 <TIM_Base_SetConfig+0x8a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a23      	ldr	r2, [pc, #140]	@ (8002274 <TIM_Base_SetConfig+0xfc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_Base_SetConfig+0x8a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a22      	ldr	r2, [pc, #136]	@ (8002278 <TIM_Base_SetConfig+0x100>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0x8a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a21      	ldr	r2, [pc, #132]	@ (800227c <TIM_Base_SetConfig+0x104>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0x8a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a20      	ldr	r2, [pc, #128]	@ (8002280 <TIM_Base_SetConfig+0x108>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a0c      	ldr	r2, [pc, #48]	@ (8002268 <TIM_Base_SetConfig+0xf0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d103      	bne.n	8002242 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f043 0204 	orr.w	r2, r3, #4
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800
 8002274:	40000c00 	.word	0x40000c00
 8002278:	40014000 	.word	0x40014000
 800227c:	40014400 	.word	0x40014400
 8002280:	40014800 	.word	0x40014800

08002284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f023 0201 	bic.w	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f023 030a 	bic.w	r3, r3, #10
 80022c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	621a      	str	r2, [r3, #32]
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b087      	sub	sp, #28
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f023 0210 	bic.w	r2, r3, #16
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800230c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	031b      	lsls	r3, r3, #12
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800231e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	621a      	str	r2, [r3, #32]
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	f043 0307 	orr.w	r3, r3, #7
 8002364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	021a      	lsls	r2, r3, #8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	431a      	orrs	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	609a      	str	r2, [r3, #8]
}
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e050      	b.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1c      	ldr	r2, [pc, #112]	@ (8002480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d018      	beq.n	8002446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241c:	d013      	beq.n	8002446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00e      	beq.n	8002446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d009      	beq.n	8002446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a15      	ldr	r2, [pc, #84]	@ (800248c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a13      	ldr	r2, [pc, #76]	@ (8002490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10c      	bne.n	8002460 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800244c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	4313      	orrs	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40010000 	.word	0x40010000
 8002484:	40000400 	.word	0x40000400
 8002488:	40000800 	.word	0x40000800
 800248c:	40000c00 	.word	0x40000c00
 8002490:	40014000 	.word	0x40014000

08002494 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <std>:
 80024bc:	2300      	movs	r3, #0
 80024be:	b510      	push	{r4, lr}
 80024c0:	4604      	mov	r4, r0
 80024c2:	e9c0 3300 	strd	r3, r3, [r0]
 80024c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024ca:	6083      	str	r3, [r0, #8]
 80024cc:	8181      	strh	r1, [r0, #12]
 80024ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80024d0:	81c2      	strh	r2, [r0, #14]
 80024d2:	6183      	str	r3, [r0, #24]
 80024d4:	4619      	mov	r1, r3
 80024d6:	2208      	movs	r2, #8
 80024d8:	305c      	adds	r0, #92	@ 0x5c
 80024da:	f000 f906 	bl	80026ea <memset>
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <std+0x58>)
 80024e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <std+0x5c>)
 80024e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <std+0x60>)
 80024e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80024ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002520 <std+0x64>)
 80024ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80024ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <std+0x68>)
 80024f0:	6224      	str	r4, [r4, #32]
 80024f2:	429c      	cmp	r4, r3
 80024f4:	d006      	beq.n	8002504 <std+0x48>
 80024f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80024fa:	4294      	cmp	r4, r2
 80024fc:	d002      	beq.n	8002504 <std+0x48>
 80024fe:	33d0      	adds	r3, #208	@ 0xd0
 8002500:	429c      	cmp	r4, r3
 8002502:	d105      	bne.n	8002510 <std+0x54>
 8002504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800250c:	f000 b966 	b.w	80027dc <__retarget_lock_init_recursive>
 8002510:	bd10      	pop	{r4, pc}
 8002512:	bf00      	nop
 8002514:	08002665 	.word	0x08002665
 8002518:	08002687 	.word	0x08002687
 800251c:	080026bf 	.word	0x080026bf
 8002520:	080026e3 	.word	0x080026e3
 8002524:	200000d8 	.word	0x200000d8

08002528 <stdio_exit_handler>:
 8002528:	4a02      	ldr	r2, [pc, #8]	@ (8002534 <stdio_exit_handler+0xc>)
 800252a:	4903      	ldr	r1, [pc, #12]	@ (8002538 <stdio_exit_handler+0x10>)
 800252c:	4803      	ldr	r0, [pc, #12]	@ (800253c <stdio_exit_handler+0x14>)
 800252e:	f000 b869 	b.w	8002604 <_fwalk_sglue>
 8002532:	bf00      	nop
 8002534:	20000010 	.word	0x20000010
 8002538:	08003079 	.word	0x08003079
 800253c:	20000020 	.word	0x20000020

08002540 <cleanup_stdio>:
 8002540:	6841      	ldr	r1, [r0, #4]
 8002542:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <cleanup_stdio+0x34>)
 8002544:	4299      	cmp	r1, r3
 8002546:	b510      	push	{r4, lr}
 8002548:	4604      	mov	r4, r0
 800254a:	d001      	beq.n	8002550 <cleanup_stdio+0x10>
 800254c:	f000 fd94 	bl	8003078 <_fflush_r>
 8002550:	68a1      	ldr	r1, [r4, #8]
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <cleanup_stdio+0x38>)
 8002554:	4299      	cmp	r1, r3
 8002556:	d002      	beq.n	800255e <cleanup_stdio+0x1e>
 8002558:	4620      	mov	r0, r4
 800255a:	f000 fd8d 	bl	8003078 <_fflush_r>
 800255e:	68e1      	ldr	r1, [r4, #12]
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <cleanup_stdio+0x3c>)
 8002562:	4299      	cmp	r1, r3
 8002564:	d004      	beq.n	8002570 <cleanup_stdio+0x30>
 8002566:	4620      	mov	r0, r4
 8002568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800256c:	f000 bd84 	b.w	8003078 <_fflush_r>
 8002570:	bd10      	pop	{r4, pc}
 8002572:	bf00      	nop
 8002574:	200000d8 	.word	0x200000d8
 8002578:	20000140 	.word	0x20000140
 800257c:	200001a8 	.word	0x200001a8

08002580 <global_stdio_init.part.0>:
 8002580:	b510      	push	{r4, lr}
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <global_stdio_init.part.0+0x30>)
 8002584:	4c0b      	ldr	r4, [pc, #44]	@ (80025b4 <global_stdio_init.part.0+0x34>)
 8002586:	4a0c      	ldr	r2, [pc, #48]	@ (80025b8 <global_stdio_init.part.0+0x38>)
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	4620      	mov	r0, r4
 800258c:	2200      	movs	r2, #0
 800258e:	2104      	movs	r1, #4
 8002590:	f7ff ff94 	bl	80024bc <std>
 8002594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002598:	2201      	movs	r2, #1
 800259a:	2109      	movs	r1, #9
 800259c:	f7ff ff8e 	bl	80024bc <std>
 80025a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80025a4:	2202      	movs	r2, #2
 80025a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025aa:	2112      	movs	r1, #18
 80025ac:	f7ff bf86 	b.w	80024bc <std>
 80025b0:	20000210 	.word	0x20000210
 80025b4:	200000d8 	.word	0x200000d8
 80025b8:	08002529 	.word	0x08002529

080025bc <__sfp_lock_acquire>:
 80025bc:	4801      	ldr	r0, [pc, #4]	@ (80025c4 <__sfp_lock_acquire+0x8>)
 80025be:	f000 b90e 	b.w	80027de <__retarget_lock_acquire_recursive>
 80025c2:	bf00      	nop
 80025c4:	20000219 	.word	0x20000219

080025c8 <__sfp_lock_release>:
 80025c8:	4801      	ldr	r0, [pc, #4]	@ (80025d0 <__sfp_lock_release+0x8>)
 80025ca:	f000 b909 	b.w	80027e0 <__retarget_lock_release_recursive>
 80025ce:	bf00      	nop
 80025d0:	20000219 	.word	0x20000219

080025d4 <__sinit>:
 80025d4:	b510      	push	{r4, lr}
 80025d6:	4604      	mov	r4, r0
 80025d8:	f7ff fff0 	bl	80025bc <__sfp_lock_acquire>
 80025dc:	6a23      	ldr	r3, [r4, #32]
 80025de:	b11b      	cbz	r3, 80025e8 <__sinit+0x14>
 80025e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025e4:	f7ff bff0 	b.w	80025c8 <__sfp_lock_release>
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <__sinit+0x28>)
 80025ea:	6223      	str	r3, [r4, #32]
 80025ec:	4b04      	ldr	r3, [pc, #16]	@ (8002600 <__sinit+0x2c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f5      	bne.n	80025e0 <__sinit+0xc>
 80025f4:	f7ff ffc4 	bl	8002580 <global_stdio_init.part.0>
 80025f8:	e7f2      	b.n	80025e0 <__sinit+0xc>
 80025fa:	bf00      	nop
 80025fc:	08002541 	.word	0x08002541
 8002600:	20000210 	.word	0x20000210

08002604 <_fwalk_sglue>:
 8002604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002608:	4607      	mov	r7, r0
 800260a:	4688      	mov	r8, r1
 800260c:	4614      	mov	r4, r2
 800260e:	2600      	movs	r6, #0
 8002610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002614:	f1b9 0901 	subs.w	r9, r9, #1
 8002618:	d505      	bpl.n	8002626 <_fwalk_sglue+0x22>
 800261a:	6824      	ldr	r4, [r4, #0]
 800261c:	2c00      	cmp	r4, #0
 800261e:	d1f7      	bne.n	8002610 <_fwalk_sglue+0xc>
 8002620:	4630      	mov	r0, r6
 8002622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002626:	89ab      	ldrh	r3, [r5, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d907      	bls.n	800263c <_fwalk_sglue+0x38>
 800262c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002630:	3301      	adds	r3, #1
 8002632:	d003      	beq.n	800263c <_fwalk_sglue+0x38>
 8002634:	4629      	mov	r1, r5
 8002636:	4638      	mov	r0, r7
 8002638:	47c0      	blx	r8
 800263a:	4306      	orrs	r6, r0
 800263c:	3568      	adds	r5, #104	@ 0x68
 800263e:	e7e9      	b.n	8002614 <_fwalk_sglue+0x10>

08002640 <iprintf>:
 8002640:	b40f      	push	{r0, r1, r2, r3}
 8002642:	b507      	push	{r0, r1, r2, lr}
 8002644:	4906      	ldr	r1, [pc, #24]	@ (8002660 <iprintf+0x20>)
 8002646:	ab04      	add	r3, sp, #16
 8002648:	6808      	ldr	r0, [r1, #0]
 800264a:	f853 2b04 	ldr.w	r2, [r3], #4
 800264e:	6881      	ldr	r1, [r0, #8]
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	f000 f9e9 	bl	8002a28 <_vfiprintf_r>
 8002656:	b003      	add	sp, #12
 8002658:	f85d eb04 	ldr.w	lr, [sp], #4
 800265c:	b004      	add	sp, #16
 800265e:	4770      	bx	lr
 8002660:	2000001c 	.word	0x2000001c

08002664 <__sread>:
 8002664:	b510      	push	{r4, lr}
 8002666:	460c      	mov	r4, r1
 8002668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800266c:	f000 f868 	bl	8002740 <_read_r>
 8002670:	2800      	cmp	r0, #0
 8002672:	bfab      	itete	ge
 8002674:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002676:	89a3      	ldrhlt	r3, [r4, #12]
 8002678:	181b      	addge	r3, r3, r0
 800267a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800267e:	bfac      	ite	ge
 8002680:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002682:	81a3      	strhlt	r3, [r4, #12]
 8002684:	bd10      	pop	{r4, pc}

08002686 <__swrite>:
 8002686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800268a:	461f      	mov	r7, r3
 800268c:	898b      	ldrh	r3, [r1, #12]
 800268e:	05db      	lsls	r3, r3, #23
 8002690:	4605      	mov	r5, r0
 8002692:	460c      	mov	r4, r1
 8002694:	4616      	mov	r6, r2
 8002696:	d505      	bpl.n	80026a4 <__swrite+0x1e>
 8002698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800269c:	2302      	movs	r3, #2
 800269e:	2200      	movs	r2, #0
 80026a0:	f000 f83c 	bl	800271c <_lseek_r>
 80026a4:	89a3      	ldrh	r3, [r4, #12]
 80026a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026ae:	81a3      	strh	r3, [r4, #12]
 80026b0:	4632      	mov	r2, r6
 80026b2:	463b      	mov	r3, r7
 80026b4:	4628      	mov	r0, r5
 80026b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026ba:	f000 b853 	b.w	8002764 <_write_r>

080026be <__sseek>:
 80026be:	b510      	push	{r4, lr}
 80026c0:	460c      	mov	r4, r1
 80026c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026c6:	f000 f829 	bl	800271c <_lseek_r>
 80026ca:	1c43      	adds	r3, r0, #1
 80026cc:	89a3      	ldrh	r3, [r4, #12]
 80026ce:	bf15      	itete	ne
 80026d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80026d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80026d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80026da:	81a3      	strheq	r3, [r4, #12]
 80026dc:	bf18      	it	ne
 80026de:	81a3      	strhne	r3, [r4, #12]
 80026e0:	bd10      	pop	{r4, pc}

080026e2 <__sclose>:
 80026e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e6:	f000 b809 	b.w	80026fc <_close_r>

080026ea <memset>:
 80026ea:	4402      	add	r2, r0
 80026ec:	4603      	mov	r3, r0
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d100      	bne.n	80026f4 <memset+0xa>
 80026f2:	4770      	bx	lr
 80026f4:	f803 1b01 	strb.w	r1, [r3], #1
 80026f8:	e7f9      	b.n	80026ee <memset+0x4>
	...

080026fc <_close_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4d06      	ldr	r5, [pc, #24]	@ (8002718 <_close_r+0x1c>)
 8002700:	2300      	movs	r3, #0
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	602b      	str	r3, [r5, #0]
 8002708:	f7fe fa61 	bl	8000bce <_close>
 800270c:	1c43      	adds	r3, r0, #1
 800270e:	d102      	bne.n	8002716 <_close_r+0x1a>
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	b103      	cbz	r3, 8002716 <_close_r+0x1a>
 8002714:	6023      	str	r3, [r4, #0]
 8002716:	bd38      	pop	{r3, r4, r5, pc}
 8002718:	20000214 	.word	0x20000214

0800271c <_lseek_r>:
 800271c:	b538      	push	{r3, r4, r5, lr}
 800271e:	4d07      	ldr	r5, [pc, #28]	@ (800273c <_lseek_r+0x20>)
 8002720:	4604      	mov	r4, r0
 8002722:	4608      	mov	r0, r1
 8002724:	4611      	mov	r1, r2
 8002726:	2200      	movs	r2, #0
 8002728:	602a      	str	r2, [r5, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	f7fe fa76 	bl	8000c1c <_lseek>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d102      	bne.n	800273a <_lseek_r+0x1e>
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	b103      	cbz	r3, 800273a <_lseek_r+0x1e>
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	bd38      	pop	{r3, r4, r5, pc}
 800273c:	20000214 	.word	0x20000214

08002740 <_read_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	4d07      	ldr	r5, [pc, #28]	@ (8002760 <_read_r+0x20>)
 8002744:	4604      	mov	r4, r0
 8002746:	4608      	mov	r0, r1
 8002748:	4611      	mov	r1, r2
 800274a:	2200      	movs	r2, #0
 800274c:	602a      	str	r2, [r5, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	f7fe fa04 	bl	8000b5c <_read>
 8002754:	1c43      	adds	r3, r0, #1
 8002756:	d102      	bne.n	800275e <_read_r+0x1e>
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	b103      	cbz	r3, 800275e <_read_r+0x1e>
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	20000214 	.word	0x20000214

08002764 <_write_r>:
 8002764:	b538      	push	{r3, r4, r5, lr}
 8002766:	4d07      	ldr	r5, [pc, #28]	@ (8002784 <_write_r+0x20>)
 8002768:	4604      	mov	r4, r0
 800276a:	4608      	mov	r0, r1
 800276c:	4611      	mov	r1, r2
 800276e:	2200      	movs	r2, #0
 8002770:	602a      	str	r2, [r5, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	f7fe fa0f 	bl	8000b96 <_write>
 8002778:	1c43      	adds	r3, r0, #1
 800277a:	d102      	bne.n	8002782 <_write_r+0x1e>
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	b103      	cbz	r3, 8002782 <_write_r+0x1e>
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	bd38      	pop	{r3, r4, r5, pc}
 8002784:	20000214 	.word	0x20000214

08002788 <__errno>:
 8002788:	4b01      	ldr	r3, [pc, #4]	@ (8002790 <__errno+0x8>)
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	2000001c 	.word	0x2000001c

08002794 <__libc_init_array>:
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	4d0d      	ldr	r5, [pc, #52]	@ (80027cc <__libc_init_array+0x38>)
 8002798:	4c0d      	ldr	r4, [pc, #52]	@ (80027d0 <__libc_init_array+0x3c>)
 800279a:	1b64      	subs	r4, r4, r5
 800279c:	10a4      	asrs	r4, r4, #2
 800279e:	2600      	movs	r6, #0
 80027a0:	42a6      	cmp	r6, r4
 80027a2:	d109      	bne.n	80027b8 <__libc_init_array+0x24>
 80027a4:	4d0b      	ldr	r5, [pc, #44]	@ (80027d4 <__libc_init_array+0x40>)
 80027a6:	4c0c      	ldr	r4, [pc, #48]	@ (80027d8 <__libc_init_array+0x44>)
 80027a8:	f000 fdb6 	bl	8003318 <_init>
 80027ac:	1b64      	subs	r4, r4, r5
 80027ae:	10a4      	asrs	r4, r4, #2
 80027b0:	2600      	movs	r6, #0
 80027b2:	42a6      	cmp	r6, r4
 80027b4:	d105      	bne.n	80027c2 <__libc_init_array+0x2e>
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
 80027b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027bc:	4798      	blx	r3
 80027be:	3601      	adds	r6, #1
 80027c0:	e7ee      	b.n	80027a0 <__libc_init_array+0xc>
 80027c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c6:	4798      	blx	r3
 80027c8:	3601      	adds	r6, #1
 80027ca:	e7f2      	b.n	80027b2 <__libc_init_array+0x1e>
 80027cc:	08003394 	.word	0x08003394
 80027d0:	08003394 	.word	0x08003394
 80027d4:	08003394 	.word	0x08003394
 80027d8:	08003398 	.word	0x08003398

080027dc <__retarget_lock_init_recursive>:
 80027dc:	4770      	bx	lr

080027de <__retarget_lock_acquire_recursive>:
 80027de:	4770      	bx	lr

080027e0 <__retarget_lock_release_recursive>:
 80027e0:	4770      	bx	lr
	...

080027e4 <_free_r>:
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4605      	mov	r5, r0
 80027e8:	2900      	cmp	r1, #0
 80027ea:	d041      	beq.n	8002870 <_free_r+0x8c>
 80027ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027f0:	1f0c      	subs	r4, r1, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bfb8      	it	lt
 80027f6:	18e4      	addlt	r4, r4, r3
 80027f8:	f000 f8e0 	bl	80029bc <__malloc_lock>
 80027fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <_free_r+0x90>)
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	b933      	cbnz	r3, 8002810 <_free_r+0x2c>
 8002802:	6063      	str	r3, [r4, #4]
 8002804:	6014      	str	r4, [r2, #0]
 8002806:	4628      	mov	r0, r5
 8002808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800280c:	f000 b8dc 	b.w	80029c8 <__malloc_unlock>
 8002810:	42a3      	cmp	r3, r4
 8002812:	d908      	bls.n	8002826 <_free_r+0x42>
 8002814:	6820      	ldr	r0, [r4, #0]
 8002816:	1821      	adds	r1, r4, r0
 8002818:	428b      	cmp	r3, r1
 800281a:	bf01      	itttt	eq
 800281c:	6819      	ldreq	r1, [r3, #0]
 800281e:	685b      	ldreq	r3, [r3, #4]
 8002820:	1809      	addeq	r1, r1, r0
 8002822:	6021      	streq	r1, [r4, #0]
 8002824:	e7ed      	b.n	8002802 <_free_r+0x1e>
 8002826:	461a      	mov	r2, r3
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	b10b      	cbz	r3, 8002830 <_free_r+0x4c>
 800282c:	42a3      	cmp	r3, r4
 800282e:	d9fa      	bls.n	8002826 <_free_r+0x42>
 8002830:	6811      	ldr	r1, [r2, #0]
 8002832:	1850      	adds	r0, r2, r1
 8002834:	42a0      	cmp	r0, r4
 8002836:	d10b      	bne.n	8002850 <_free_r+0x6c>
 8002838:	6820      	ldr	r0, [r4, #0]
 800283a:	4401      	add	r1, r0
 800283c:	1850      	adds	r0, r2, r1
 800283e:	4283      	cmp	r3, r0
 8002840:	6011      	str	r1, [r2, #0]
 8002842:	d1e0      	bne.n	8002806 <_free_r+0x22>
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	6053      	str	r3, [r2, #4]
 800284a:	4408      	add	r0, r1
 800284c:	6010      	str	r0, [r2, #0]
 800284e:	e7da      	b.n	8002806 <_free_r+0x22>
 8002850:	d902      	bls.n	8002858 <_free_r+0x74>
 8002852:	230c      	movs	r3, #12
 8002854:	602b      	str	r3, [r5, #0]
 8002856:	e7d6      	b.n	8002806 <_free_r+0x22>
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	1821      	adds	r1, r4, r0
 800285c:	428b      	cmp	r3, r1
 800285e:	bf04      	itt	eq
 8002860:	6819      	ldreq	r1, [r3, #0]
 8002862:	685b      	ldreq	r3, [r3, #4]
 8002864:	6063      	str	r3, [r4, #4]
 8002866:	bf04      	itt	eq
 8002868:	1809      	addeq	r1, r1, r0
 800286a:	6021      	streq	r1, [r4, #0]
 800286c:	6054      	str	r4, [r2, #4]
 800286e:	e7ca      	b.n	8002806 <_free_r+0x22>
 8002870:	bd38      	pop	{r3, r4, r5, pc}
 8002872:	bf00      	nop
 8002874:	20000220 	.word	0x20000220

08002878 <sbrk_aligned>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	4e0f      	ldr	r6, [pc, #60]	@ (80028b8 <sbrk_aligned+0x40>)
 800287c:	460c      	mov	r4, r1
 800287e:	6831      	ldr	r1, [r6, #0]
 8002880:	4605      	mov	r5, r0
 8002882:	b911      	cbnz	r1, 800288a <sbrk_aligned+0x12>
 8002884:	f000 fcb4 	bl	80031f0 <_sbrk_r>
 8002888:	6030      	str	r0, [r6, #0]
 800288a:	4621      	mov	r1, r4
 800288c:	4628      	mov	r0, r5
 800288e:	f000 fcaf 	bl	80031f0 <_sbrk_r>
 8002892:	1c43      	adds	r3, r0, #1
 8002894:	d103      	bne.n	800289e <sbrk_aligned+0x26>
 8002896:	f04f 34ff 	mov.w	r4, #4294967295
 800289a:	4620      	mov	r0, r4
 800289c:	bd70      	pop	{r4, r5, r6, pc}
 800289e:	1cc4      	adds	r4, r0, #3
 80028a0:	f024 0403 	bic.w	r4, r4, #3
 80028a4:	42a0      	cmp	r0, r4
 80028a6:	d0f8      	beq.n	800289a <sbrk_aligned+0x22>
 80028a8:	1a21      	subs	r1, r4, r0
 80028aa:	4628      	mov	r0, r5
 80028ac:	f000 fca0 	bl	80031f0 <_sbrk_r>
 80028b0:	3001      	adds	r0, #1
 80028b2:	d1f2      	bne.n	800289a <sbrk_aligned+0x22>
 80028b4:	e7ef      	b.n	8002896 <sbrk_aligned+0x1e>
 80028b6:	bf00      	nop
 80028b8:	2000021c 	.word	0x2000021c

080028bc <_malloc_r>:
 80028bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028c0:	1ccd      	adds	r5, r1, #3
 80028c2:	f025 0503 	bic.w	r5, r5, #3
 80028c6:	3508      	adds	r5, #8
 80028c8:	2d0c      	cmp	r5, #12
 80028ca:	bf38      	it	cc
 80028cc:	250c      	movcc	r5, #12
 80028ce:	2d00      	cmp	r5, #0
 80028d0:	4606      	mov	r6, r0
 80028d2:	db01      	blt.n	80028d8 <_malloc_r+0x1c>
 80028d4:	42a9      	cmp	r1, r5
 80028d6:	d904      	bls.n	80028e2 <_malloc_r+0x26>
 80028d8:	230c      	movs	r3, #12
 80028da:	6033      	str	r3, [r6, #0]
 80028dc:	2000      	movs	r0, #0
 80028de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029b8 <_malloc_r+0xfc>
 80028e6:	f000 f869 	bl	80029bc <__malloc_lock>
 80028ea:	f8d8 3000 	ldr.w	r3, [r8]
 80028ee:	461c      	mov	r4, r3
 80028f0:	bb44      	cbnz	r4, 8002944 <_malloc_r+0x88>
 80028f2:	4629      	mov	r1, r5
 80028f4:	4630      	mov	r0, r6
 80028f6:	f7ff ffbf 	bl	8002878 <sbrk_aligned>
 80028fa:	1c43      	adds	r3, r0, #1
 80028fc:	4604      	mov	r4, r0
 80028fe:	d158      	bne.n	80029b2 <_malloc_r+0xf6>
 8002900:	f8d8 4000 	ldr.w	r4, [r8]
 8002904:	4627      	mov	r7, r4
 8002906:	2f00      	cmp	r7, #0
 8002908:	d143      	bne.n	8002992 <_malloc_r+0xd6>
 800290a:	2c00      	cmp	r4, #0
 800290c:	d04b      	beq.n	80029a6 <_malloc_r+0xea>
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	4639      	mov	r1, r7
 8002912:	4630      	mov	r0, r6
 8002914:	eb04 0903 	add.w	r9, r4, r3
 8002918:	f000 fc6a 	bl	80031f0 <_sbrk_r>
 800291c:	4581      	cmp	r9, r0
 800291e:	d142      	bne.n	80029a6 <_malloc_r+0xea>
 8002920:	6821      	ldr	r1, [r4, #0]
 8002922:	1a6d      	subs	r5, r5, r1
 8002924:	4629      	mov	r1, r5
 8002926:	4630      	mov	r0, r6
 8002928:	f7ff ffa6 	bl	8002878 <sbrk_aligned>
 800292c:	3001      	adds	r0, #1
 800292e:	d03a      	beq.n	80029a6 <_malloc_r+0xea>
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	442b      	add	r3, r5
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	f8d8 3000 	ldr.w	r3, [r8]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	bb62      	cbnz	r2, 8002998 <_malloc_r+0xdc>
 800293e:	f8c8 7000 	str.w	r7, [r8]
 8002942:	e00f      	b.n	8002964 <_malloc_r+0xa8>
 8002944:	6822      	ldr	r2, [r4, #0]
 8002946:	1b52      	subs	r2, r2, r5
 8002948:	d420      	bmi.n	800298c <_malloc_r+0xd0>
 800294a:	2a0b      	cmp	r2, #11
 800294c:	d917      	bls.n	800297e <_malloc_r+0xc2>
 800294e:	1961      	adds	r1, r4, r5
 8002950:	42a3      	cmp	r3, r4
 8002952:	6025      	str	r5, [r4, #0]
 8002954:	bf18      	it	ne
 8002956:	6059      	strne	r1, [r3, #4]
 8002958:	6863      	ldr	r3, [r4, #4]
 800295a:	bf08      	it	eq
 800295c:	f8c8 1000 	streq.w	r1, [r8]
 8002960:	5162      	str	r2, [r4, r5]
 8002962:	604b      	str	r3, [r1, #4]
 8002964:	4630      	mov	r0, r6
 8002966:	f000 f82f 	bl	80029c8 <__malloc_unlock>
 800296a:	f104 000b 	add.w	r0, r4, #11
 800296e:	1d23      	adds	r3, r4, #4
 8002970:	f020 0007 	bic.w	r0, r0, #7
 8002974:	1ac2      	subs	r2, r0, r3
 8002976:	bf1c      	itt	ne
 8002978:	1a1b      	subne	r3, r3, r0
 800297a:	50a3      	strne	r3, [r4, r2]
 800297c:	e7af      	b.n	80028de <_malloc_r+0x22>
 800297e:	6862      	ldr	r2, [r4, #4]
 8002980:	42a3      	cmp	r3, r4
 8002982:	bf0c      	ite	eq
 8002984:	f8c8 2000 	streq.w	r2, [r8]
 8002988:	605a      	strne	r2, [r3, #4]
 800298a:	e7eb      	b.n	8002964 <_malloc_r+0xa8>
 800298c:	4623      	mov	r3, r4
 800298e:	6864      	ldr	r4, [r4, #4]
 8002990:	e7ae      	b.n	80028f0 <_malloc_r+0x34>
 8002992:	463c      	mov	r4, r7
 8002994:	687f      	ldr	r7, [r7, #4]
 8002996:	e7b6      	b.n	8002906 <_malloc_r+0x4a>
 8002998:	461a      	mov	r2, r3
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	42a3      	cmp	r3, r4
 800299e:	d1fb      	bne.n	8002998 <_malloc_r+0xdc>
 80029a0:	2300      	movs	r3, #0
 80029a2:	6053      	str	r3, [r2, #4]
 80029a4:	e7de      	b.n	8002964 <_malloc_r+0xa8>
 80029a6:	230c      	movs	r3, #12
 80029a8:	6033      	str	r3, [r6, #0]
 80029aa:	4630      	mov	r0, r6
 80029ac:	f000 f80c 	bl	80029c8 <__malloc_unlock>
 80029b0:	e794      	b.n	80028dc <_malloc_r+0x20>
 80029b2:	6005      	str	r5, [r0, #0]
 80029b4:	e7d6      	b.n	8002964 <_malloc_r+0xa8>
 80029b6:	bf00      	nop
 80029b8:	20000220 	.word	0x20000220

080029bc <__malloc_lock>:
 80029bc:	4801      	ldr	r0, [pc, #4]	@ (80029c4 <__malloc_lock+0x8>)
 80029be:	f7ff bf0e 	b.w	80027de <__retarget_lock_acquire_recursive>
 80029c2:	bf00      	nop
 80029c4:	20000218 	.word	0x20000218

080029c8 <__malloc_unlock>:
 80029c8:	4801      	ldr	r0, [pc, #4]	@ (80029d0 <__malloc_unlock+0x8>)
 80029ca:	f7ff bf09 	b.w	80027e0 <__retarget_lock_release_recursive>
 80029ce:	bf00      	nop
 80029d0:	20000218 	.word	0x20000218

080029d4 <__sfputc_r>:
 80029d4:	6893      	ldr	r3, [r2, #8]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	b410      	push	{r4}
 80029dc:	6093      	str	r3, [r2, #8]
 80029de:	da08      	bge.n	80029f2 <__sfputc_r+0x1e>
 80029e0:	6994      	ldr	r4, [r2, #24]
 80029e2:	42a3      	cmp	r3, r4
 80029e4:	db01      	blt.n	80029ea <__sfputc_r+0x16>
 80029e6:	290a      	cmp	r1, #10
 80029e8:	d103      	bne.n	80029f2 <__sfputc_r+0x1e>
 80029ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029ee:	f000 bb6b 	b.w	80030c8 <__swbuf_r>
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	1c58      	adds	r0, r3, #1
 80029f6:	6010      	str	r0, [r2, #0]
 80029f8:	7019      	strb	r1, [r3, #0]
 80029fa:	4608      	mov	r0, r1
 80029fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <__sfputs_r>:
 8002a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a04:	4606      	mov	r6, r0
 8002a06:	460f      	mov	r7, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	18d5      	adds	r5, r2, r3
 8002a0c:	42ac      	cmp	r4, r5
 8002a0e:	d101      	bne.n	8002a14 <__sfputs_r+0x12>
 8002a10:	2000      	movs	r0, #0
 8002a12:	e007      	b.n	8002a24 <__sfputs_r+0x22>
 8002a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a18:	463a      	mov	r2, r7
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	f7ff ffda 	bl	80029d4 <__sfputc_r>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d1f3      	bne.n	8002a0c <__sfputs_r+0xa>
 8002a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a28 <_vfiprintf_r>:
 8002a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2c:	460d      	mov	r5, r1
 8002a2e:	b09d      	sub	sp, #116	@ 0x74
 8002a30:	4614      	mov	r4, r2
 8002a32:	4698      	mov	r8, r3
 8002a34:	4606      	mov	r6, r0
 8002a36:	b118      	cbz	r0, 8002a40 <_vfiprintf_r+0x18>
 8002a38:	6a03      	ldr	r3, [r0, #32]
 8002a3a:	b90b      	cbnz	r3, 8002a40 <_vfiprintf_r+0x18>
 8002a3c:	f7ff fdca 	bl	80025d4 <__sinit>
 8002a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a42:	07d9      	lsls	r1, r3, #31
 8002a44:	d405      	bmi.n	8002a52 <_vfiprintf_r+0x2a>
 8002a46:	89ab      	ldrh	r3, [r5, #12]
 8002a48:	059a      	lsls	r2, r3, #22
 8002a4a:	d402      	bmi.n	8002a52 <_vfiprintf_r+0x2a>
 8002a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a4e:	f7ff fec6 	bl	80027de <__retarget_lock_acquire_recursive>
 8002a52:	89ab      	ldrh	r3, [r5, #12]
 8002a54:	071b      	lsls	r3, r3, #28
 8002a56:	d501      	bpl.n	8002a5c <_vfiprintf_r+0x34>
 8002a58:	692b      	ldr	r3, [r5, #16]
 8002a5a:	b99b      	cbnz	r3, 8002a84 <_vfiprintf_r+0x5c>
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	4630      	mov	r0, r6
 8002a60:	f000 fb70 	bl	8003144 <__swsetup_r>
 8002a64:	b170      	cbz	r0, 8002a84 <_vfiprintf_r+0x5c>
 8002a66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a68:	07dc      	lsls	r4, r3, #31
 8002a6a:	d504      	bpl.n	8002a76 <_vfiprintf_r+0x4e>
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	b01d      	add	sp, #116	@ 0x74
 8002a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a76:	89ab      	ldrh	r3, [r5, #12]
 8002a78:	0598      	lsls	r0, r3, #22
 8002a7a:	d4f7      	bmi.n	8002a6c <_vfiprintf_r+0x44>
 8002a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a7e:	f7ff feaf 	bl	80027e0 <__retarget_lock_release_recursive>
 8002a82:	e7f3      	b.n	8002a6c <_vfiprintf_r+0x44>
 8002a84:	2300      	movs	r3, #0
 8002a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a88:	2320      	movs	r3, #32
 8002a8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a92:	2330      	movs	r3, #48	@ 0x30
 8002a94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002c44 <_vfiprintf_r+0x21c>
 8002a98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a9c:	f04f 0901 	mov.w	r9, #1
 8002aa0:	4623      	mov	r3, r4
 8002aa2:	469a      	mov	sl, r3
 8002aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aa8:	b10a      	cbz	r2, 8002aae <_vfiprintf_r+0x86>
 8002aaa:	2a25      	cmp	r2, #37	@ 0x25
 8002aac:	d1f9      	bne.n	8002aa2 <_vfiprintf_r+0x7a>
 8002aae:	ebba 0b04 	subs.w	fp, sl, r4
 8002ab2:	d00b      	beq.n	8002acc <_vfiprintf_r+0xa4>
 8002ab4:	465b      	mov	r3, fp
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	4629      	mov	r1, r5
 8002aba:	4630      	mov	r0, r6
 8002abc:	f7ff ffa1 	bl	8002a02 <__sfputs_r>
 8002ac0:	3001      	adds	r0, #1
 8002ac2:	f000 80a7 	beq.w	8002c14 <_vfiprintf_r+0x1ec>
 8002ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ac8:	445a      	add	r2, fp
 8002aca:	9209      	str	r2, [sp, #36]	@ 0x24
 8002acc:	f89a 3000 	ldrb.w	r3, [sl]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 809f 	beq.w	8002c14 <_vfiprintf_r+0x1ec>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ae0:	f10a 0a01 	add.w	sl, sl, #1
 8002ae4:	9304      	str	r3, [sp, #16]
 8002ae6:	9307      	str	r3, [sp, #28]
 8002ae8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002aec:	931a      	str	r3, [sp, #104]	@ 0x68
 8002aee:	4654      	mov	r4, sl
 8002af0:	2205      	movs	r2, #5
 8002af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002af6:	4853      	ldr	r0, [pc, #332]	@ (8002c44 <_vfiprintf_r+0x21c>)
 8002af8:	f7fd fb72 	bl	80001e0 <memchr>
 8002afc:	9a04      	ldr	r2, [sp, #16]
 8002afe:	b9d8      	cbnz	r0, 8002b38 <_vfiprintf_r+0x110>
 8002b00:	06d1      	lsls	r1, r2, #27
 8002b02:	bf44      	itt	mi
 8002b04:	2320      	movmi	r3, #32
 8002b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b0a:	0713      	lsls	r3, r2, #28
 8002b0c:	bf44      	itt	mi
 8002b0e:	232b      	movmi	r3, #43	@ 0x2b
 8002b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b14:	f89a 3000 	ldrb.w	r3, [sl]
 8002b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b1a:	d015      	beq.n	8002b48 <_vfiprintf_r+0x120>
 8002b1c:	9a07      	ldr	r2, [sp, #28]
 8002b1e:	4654      	mov	r4, sl
 8002b20:	2000      	movs	r0, #0
 8002b22:	f04f 0c0a 	mov.w	ip, #10
 8002b26:	4621      	mov	r1, r4
 8002b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b2c:	3b30      	subs	r3, #48	@ 0x30
 8002b2e:	2b09      	cmp	r3, #9
 8002b30:	d94b      	bls.n	8002bca <_vfiprintf_r+0x1a2>
 8002b32:	b1b0      	cbz	r0, 8002b62 <_vfiprintf_r+0x13a>
 8002b34:	9207      	str	r2, [sp, #28]
 8002b36:	e014      	b.n	8002b62 <_vfiprintf_r+0x13a>
 8002b38:	eba0 0308 	sub.w	r3, r0, r8
 8002b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8002b40:	4313      	orrs	r3, r2
 8002b42:	9304      	str	r3, [sp, #16]
 8002b44:	46a2      	mov	sl, r4
 8002b46:	e7d2      	b.n	8002aee <_vfiprintf_r+0xc6>
 8002b48:	9b03      	ldr	r3, [sp, #12]
 8002b4a:	1d19      	adds	r1, r3, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	9103      	str	r1, [sp, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bfbb      	ittet	lt
 8002b54:	425b      	neglt	r3, r3
 8002b56:	f042 0202 	orrlt.w	r2, r2, #2
 8002b5a:	9307      	strge	r3, [sp, #28]
 8002b5c:	9307      	strlt	r3, [sp, #28]
 8002b5e:	bfb8      	it	lt
 8002b60:	9204      	strlt	r2, [sp, #16]
 8002b62:	7823      	ldrb	r3, [r4, #0]
 8002b64:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b66:	d10a      	bne.n	8002b7e <_vfiprintf_r+0x156>
 8002b68:	7863      	ldrb	r3, [r4, #1]
 8002b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b6c:	d132      	bne.n	8002bd4 <_vfiprintf_r+0x1ac>
 8002b6e:	9b03      	ldr	r3, [sp, #12]
 8002b70:	1d1a      	adds	r2, r3, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	9203      	str	r2, [sp, #12]
 8002b76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b7a:	3402      	adds	r4, #2
 8002b7c:	9305      	str	r3, [sp, #20]
 8002b7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002c54 <_vfiprintf_r+0x22c>
 8002b82:	7821      	ldrb	r1, [r4, #0]
 8002b84:	2203      	movs	r2, #3
 8002b86:	4650      	mov	r0, sl
 8002b88:	f7fd fb2a 	bl	80001e0 <memchr>
 8002b8c:	b138      	cbz	r0, 8002b9e <_vfiprintf_r+0x176>
 8002b8e:	9b04      	ldr	r3, [sp, #16]
 8002b90:	eba0 000a 	sub.w	r0, r0, sl
 8002b94:	2240      	movs	r2, #64	@ 0x40
 8002b96:	4082      	lsls	r2, r0
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	3401      	adds	r4, #1
 8002b9c:	9304      	str	r3, [sp, #16]
 8002b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ba2:	4829      	ldr	r0, [pc, #164]	@ (8002c48 <_vfiprintf_r+0x220>)
 8002ba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ba8:	2206      	movs	r2, #6
 8002baa:	f7fd fb19 	bl	80001e0 <memchr>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d03f      	beq.n	8002c32 <_vfiprintf_r+0x20a>
 8002bb2:	4b26      	ldr	r3, [pc, #152]	@ (8002c4c <_vfiprintf_r+0x224>)
 8002bb4:	bb1b      	cbnz	r3, 8002bfe <_vfiprintf_r+0x1d6>
 8002bb6:	9b03      	ldr	r3, [sp, #12]
 8002bb8:	3307      	adds	r3, #7
 8002bba:	f023 0307 	bic.w	r3, r3, #7
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	9303      	str	r3, [sp, #12]
 8002bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bc4:	443b      	add	r3, r7
 8002bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bc8:	e76a      	b.n	8002aa0 <_vfiprintf_r+0x78>
 8002bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bce:	460c      	mov	r4, r1
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	e7a8      	b.n	8002b26 <_vfiprintf_r+0xfe>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	3401      	adds	r4, #1
 8002bd8:	9305      	str	r3, [sp, #20]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f04f 0c0a 	mov.w	ip, #10
 8002be0:	4620      	mov	r0, r4
 8002be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002be6:	3a30      	subs	r2, #48	@ 0x30
 8002be8:	2a09      	cmp	r2, #9
 8002bea:	d903      	bls.n	8002bf4 <_vfiprintf_r+0x1cc>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0c6      	beq.n	8002b7e <_vfiprintf_r+0x156>
 8002bf0:	9105      	str	r1, [sp, #20]
 8002bf2:	e7c4      	b.n	8002b7e <_vfiprintf_r+0x156>
 8002bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e7f0      	b.n	8002be0 <_vfiprintf_r+0x1b8>
 8002bfe:	ab03      	add	r3, sp, #12
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	462a      	mov	r2, r5
 8002c04:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <_vfiprintf_r+0x228>)
 8002c06:	a904      	add	r1, sp, #16
 8002c08:	4630      	mov	r0, r6
 8002c0a:	f3af 8000 	nop.w
 8002c0e:	4607      	mov	r7, r0
 8002c10:	1c78      	adds	r0, r7, #1
 8002c12:	d1d6      	bne.n	8002bc2 <_vfiprintf_r+0x19a>
 8002c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c16:	07d9      	lsls	r1, r3, #31
 8002c18:	d405      	bmi.n	8002c26 <_vfiprintf_r+0x1fe>
 8002c1a:	89ab      	ldrh	r3, [r5, #12]
 8002c1c:	059a      	lsls	r2, r3, #22
 8002c1e:	d402      	bmi.n	8002c26 <_vfiprintf_r+0x1fe>
 8002c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c22:	f7ff fddd 	bl	80027e0 <__retarget_lock_release_recursive>
 8002c26:	89ab      	ldrh	r3, [r5, #12]
 8002c28:	065b      	lsls	r3, r3, #25
 8002c2a:	f53f af1f 	bmi.w	8002a6c <_vfiprintf_r+0x44>
 8002c2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c30:	e71e      	b.n	8002a70 <_vfiprintf_r+0x48>
 8002c32:	ab03      	add	r3, sp, #12
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	462a      	mov	r2, r5
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <_vfiprintf_r+0x228>)
 8002c3a:	a904      	add	r1, sp, #16
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	f000 f879 	bl	8002d34 <_printf_i>
 8002c42:	e7e4      	b.n	8002c0e <_vfiprintf_r+0x1e6>
 8002c44:	08003358 	.word	0x08003358
 8002c48:	08003362 	.word	0x08003362
 8002c4c:	00000000 	.word	0x00000000
 8002c50:	08002a03 	.word	0x08002a03
 8002c54:	0800335e 	.word	0x0800335e

08002c58 <_printf_common>:
 8002c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c5c:	4616      	mov	r6, r2
 8002c5e:	4698      	mov	r8, r3
 8002c60:	688a      	ldr	r2, [r1, #8]
 8002c62:	690b      	ldr	r3, [r1, #16]
 8002c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	bfb8      	it	lt
 8002c6c:	4613      	movlt	r3, r2
 8002c6e:	6033      	str	r3, [r6, #0]
 8002c70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c74:	4607      	mov	r7, r0
 8002c76:	460c      	mov	r4, r1
 8002c78:	b10a      	cbz	r2, 8002c7e <_printf_common+0x26>
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	6033      	str	r3, [r6, #0]
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	0699      	lsls	r1, r3, #26
 8002c82:	bf42      	ittt	mi
 8002c84:	6833      	ldrmi	r3, [r6, #0]
 8002c86:	3302      	addmi	r3, #2
 8002c88:	6033      	strmi	r3, [r6, #0]
 8002c8a:	6825      	ldr	r5, [r4, #0]
 8002c8c:	f015 0506 	ands.w	r5, r5, #6
 8002c90:	d106      	bne.n	8002ca0 <_printf_common+0x48>
 8002c92:	f104 0a19 	add.w	sl, r4, #25
 8002c96:	68e3      	ldr	r3, [r4, #12]
 8002c98:	6832      	ldr	r2, [r6, #0]
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	42ab      	cmp	r3, r5
 8002c9e:	dc26      	bgt.n	8002cee <_printf_common+0x96>
 8002ca0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ca4:	6822      	ldr	r2, [r4, #0]
 8002ca6:	3b00      	subs	r3, #0
 8002ca8:	bf18      	it	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	0692      	lsls	r2, r2, #26
 8002cae:	d42b      	bmi.n	8002d08 <_printf_common+0xb0>
 8002cb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	4638      	mov	r0, r7
 8002cb8:	47c8      	blx	r9
 8002cba:	3001      	adds	r0, #1
 8002cbc:	d01e      	beq.n	8002cfc <_printf_common+0xa4>
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	6922      	ldr	r2, [r4, #16]
 8002cc2:	f003 0306 	and.w	r3, r3, #6
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	bf02      	ittt	eq
 8002cca:	68e5      	ldreq	r5, [r4, #12]
 8002ccc:	6833      	ldreq	r3, [r6, #0]
 8002cce:	1aed      	subeq	r5, r5, r3
 8002cd0:	68a3      	ldr	r3, [r4, #8]
 8002cd2:	bf0c      	ite	eq
 8002cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cd8:	2500      	movne	r5, #0
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	bfc4      	itt	gt
 8002cde:	1a9b      	subgt	r3, r3, r2
 8002ce0:	18ed      	addgt	r5, r5, r3
 8002ce2:	2600      	movs	r6, #0
 8002ce4:	341a      	adds	r4, #26
 8002ce6:	42b5      	cmp	r5, r6
 8002ce8:	d11a      	bne.n	8002d20 <_printf_common+0xc8>
 8002cea:	2000      	movs	r0, #0
 8002cec:	e008      	b.n	8002d00 <_printf_common+0xa8>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	4652      	mov	r2, sl
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	4638      	mov	r0, r7
 8002cf6:	47c8      	blx	r9
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d103      	bne.n	8002d04 <_printf_common+0xac>
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d04:	3501      	adds	r5, #1
 8002d06:	e7c6      	b.n	8002c96 <_printf_common+0x3e>
 8002d08:	18e1      	adds	r1, r4, r3
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	2030      	movs	r0, #48	@ 0x30
 8002d0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d12:	4422      	add	r2, r4
 8002d14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002d18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	e7c7      	b.n	8002cb0 <_printf_common+0x58>
 8002d20:	2301      	movs	r3, #1
 8002d22:	4622      	mov	r2, r4
 8002d24:	4641      	mov	r1, r8
 8002d26:	4638      	mov	r0, r7
 8002d28:	47c8      	blx	r9
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	d0e6      	beq.n	8002cfc <_printf_common+0xa4>
 8002d2e:	3601      	adds	r6, #1
 8002d30:	e7d9      	b.n	8002ce6 <_printf_common+0x8e>
	...

08002d34 <_printf_i>:
 8002d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d38:	7e0f      	ldrb	r7, [r1, #24]
 8002d3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d3c:	2f78      	cmp	r7, #120	@ 0x78
 8002d3e:	4691      	mov	r9, r2
 8002d40:	4680      	mov	r8, r0
 8002d42:	460c      	mov	r4, r1
 8002d44:	469a      	mov	sl, r3
 8002d46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d4a:	d807      	bhi.n	8002d5c <_printf_i+0x28>
 8002d4c:	2f62      	cmp	r7, #98	@ 0x62
 8002d4e:	d80a      	bhi.n	8002d66 <_printf_i+0x32>
 8002d50:	2f00      	cmp	r7, #0
 8002d52:	f000 80d1 	beq.w	8002ef8 <_printf_i+0x1c4>
 8002d56:	2f58      	cmp	r7, #88	@ 0x58
 8002d58:	f000 80b8 	beq.w	8002ecc <_printf_i+0x198>
 8002d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d64:	e03a      	b.n	8002ddc <_printf_i+0xa8>
 8002d66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d6a:	2b15      	cmp	r3, #21
 8002d6c:	d8f6      	bhi.n	8002d5c <_printf_i+0x28>
 8002d6e:	a101      	add	r1, pc, #4	@ (adr r1, 8002d74 <_printf_i+0x40>)
 8002d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d74:	08002dcd 	.word	0x08002dcd
 8002d78:	08002de1 	.word	0x08002de1
 8002d7c:	08002d5d 	.word	0x08002d5d
 8002d80:	08002d5d 	.word	0x08002d5d
 8002d84:	08002d5d 	.word	0x08002d5d
 8002d88:	08002d5d 	.word	0x08002d5d
 8002d8c:	08002de1 	.word	0x08002de1
 8002d90:	08002d5d 	.word	0x08002d5d
 8002d94:	08002d5d 	.word	0x08002d5d
 8002d98:	08002d5d 	.word	0x08002d5d
 8002d9c:	08002d5d 	.word	0x08002d5d
 8002da0:	08002edf 	.word	0x08002edf
 8002da4:	08002e0b 	.word	0x08002e0b
 8002da8:	08002e99 	.word	0x08002e99
 8002dac:	08002d5d 	.word	0x08002d5d
 8002db0:	08002d5d 	.word	0x08002d5d
 8002db4:	08002f01 	.word	0x08002f01
 8002db8:	08002d5d 	.word	0x08002d5d
 8002dbc:	08002e0b 	.word	0x08002e0b
 8002dc0:	08002d5d 	.word	0x08002d5d
 8002dc4:	08002d5d 	.word	0x08002d5d
 8002dc8:	08002ea1 	.word	0x08002ea1
 8002dcc:	6833      	ldr	r3, [r6, #0]
 8002dce:	1d1a      	adds	r2, r3, #4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6032      	str	r2, [r6, #0]
 8002dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e09c      	b.n	8002f1a <_printf_i+0x1e6>
 8002de0:	6833      	ldr	r3, [r6, #0]
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	1d19      	adds	r1, r3, #4
 8002de6:	6031      	str	r1, [r6, #0]
 8002de8:	0606      	lsls	r6, r0, #24
 8002dea:	d501      	bpl.n	8002df0 <_printf_i+0xbc>
 8002dec:	681d      	ldr	r5, [r3, #0]
 8002dee:	e003      	b.n	8002df8 <_printf_i+0xc4>
 8002df0:	0645      	lsls	r5, r0, #25
 8002df2:	d5fb      	bpl.n	8002dec <_printf_i+0xb8>
 8002df4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002df8:	2d00      	cmp	r5, #0
 8002dfa:	da03      	bge.n	8002e04 <_printf_i+0xd0>
 8002dfc:	232d      	movs	r3, #45	@ 0x2d
 8002dfe:	426d      	negs	r5, r5
 8002e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e04:	4858      	ldr	r0, [pc, #352]	@ (8002f68 <_printf_i+0x234>)
 8002e06:	230a      	movs	r3, #10
 8002e08:	e011      	b.n	8002e2e <_printf_i+0xfa>
 8002e0a:	6821      	ldr	r1, [r4, #0]
 8002e0c:	6833      	ldr	r3, [r6, #0]
 8002e0e:	0608      	lsls	r0, r1, #24
 8002e10:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e14:	d402      	bmi.n	8002e1c <_printf_i+0xe8>
 8002e16:	0649      	lsls	r1, r1, #25
 8002e18:	bf48      	it	mi
 8002e1a:	b2ad      	uxthmi	r5, r5
 8002e1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002e1e:	4852      	ldr	r0, [pc, #328]	@ (8002f68 <_printf_i+0x234>)
 8002e20:	6033      	str	r3, [r6, #0]
 8002e22:	bf14      	ite	ne
 8002e24:	230a      	movne	r3, #10
 8002e26:	2308      	moveq	r3, #8
 8002e28:	2100      	movs	r1, #0
 8002e2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e2e:	6866      	ldr	r6, [r4, #4]
 8002e30:	60a6      	str	r6, [r4, #8]
 8002e32:	2e00      	cmp	r6, #0
 8002e34:	db05      	blt.n	8002e42 <_printf_i+0x10e>
 8002e36:	6821      	ldr	r1, [r4, #0]
 8002e38:	432e      	orrs	r6, r5
 8002e3a:	f021 0104 	bic.w	r1, r1, #4
 8002e3e:	6021      	str	r1, [r4, #0]
 8002e40:	d04b      	beq.n	8002eda <_printf_i+0x1a6>
 8002e42:	4616      	mov	r6, r2
 8002e44:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e48:	fb03 5711 	mls	r7, r3, r1, r5
 8002e4c:	5dc7      	ldrb	r7, [r0, r7]
 8002e4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e52:	462f      	mov	r7, r5
 8002e54:	42bb      	cmp	r3, r7
 8002e56:	460d      	mov	r5, r1
 8002e58:	d9f4      	bls.n	8002e44 <_printf_i+0x110>
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d10b      	bne.n	8002e76 <_printf_i+0x142>
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	07df      	lsls	r7, r3, #31
 8002e62:	d508      	bpl.n	8002e76 <_printf_i+0x142>
 8002e64:	6923      	ldr	r3, [r4, #16]
 8002e66:	6861      	ldr	r1, [r4, #4]
 8002e68:	4299      	cmp	r1, r3
 8002e6a:	bfde      	ittt	le
 8002e6c:	2330      	movle	r3, #48	@ 0x30
 8002e6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e76:	1b92      	subs	r2, r2, r6
 8002e78:	6122      	str	r2, [r4, #16]
 8002e7a:	f8cd a000 	str.w	sl, [sp]
 8002e7e:	464b      	mov	r3, r9
 8002e80:	aa03      	add	r2, sp, #12
 8002e82:	4621      	mov	r1, r4
 8002e84:	4640      	mov	r0, r8
 8002e86:	f7ff fee7 	bl	8002c58 <_printf_common>
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d14a      	bne.n	8002f24 <_printf_i+0x1f0>
 8002e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e92:	b004      	add	sp, #16
 8002e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	f043 0320 	orr.w	r3, r3, #32
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	4832      	ldr	r0, [pc, #200]	@ (8002f6c <_printf_i+0x238>)
 8002ea2:	2778      	movs	r7, #120	@ 0x78
 8002ea4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	6831      	ldr	r1, [r6, #0]
 8002eac:	061f      	lsls	r7, r3, #24
 8002eae:	f851 5b04 	ldr.w	r5, [r1], #4
 8002eb2:	d402      	bmi.n	8002eba <_printf_i+0x186>
 8002eb4:	065f      	lsls	r7, r3, #25
 8002eb6:	bf48      	it	mi
 8002eb8:	b2ad      	uxthmi	r5, r5
 8002eba:	6031      	str	r1, [r6, #0]
 8002ebc:	07d9      	lsls	r1, r3, #31
 8002ebe:	bf44      	itt	mi
 8002ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8002ec4:	6023      	strmi	r3, [r4, #0]
 8002ec6:	b11d      	cbz	r5, 8002ed0 <_printf_i+0x19c>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	e7ad      	b.n	8002e28 <_printf_i+0xf4>
 8002ecc:	4826      	ldr	r0, [pc, #152]	@ (8002f68 <_printf_i+0x234>)
 8002ece:	e7e9      	b.n	8002ea4 <_printf_i+0x170>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	f023 0320 	bic.w	r3, r3, #32
 8002ed6:	6023      	str	r3, [r4, #0]
 8002ed8:	e7f6      	b.n	8002ec8 <_printf_i+0x194>
 8002eda:	4616      	mov	r6, r2
 8002edc:	e7bd      	b.n	8002e5a <_printf_i+0x126>
 8002ede:	6833      	ldr	r3, [r6, #0]
 8002ee0:	6825      	ldr	r5, [r4, #0]
 8002ee2:	6961      	ldr	r1, [r4, #20]
 8002ee4:	1d18      	adds	r0, r3, #4
 8002ee6:	6030      	str	r0, [r6, #0]
 8002ee8:	062e      	lsls	r6, r5, #24
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	d501      	bpl.n	8002ef2 <_printf_i+0x1be>
 8002eee:	6019      	str	r1, [r3, #0]
 8002ef0:	e002      	b.n	8002ef8 <_printf_i+0x1c4>
 8002ef2:	0668      	lsls	r0, r5, #25
 8002ef4:	d5fb      	bpl.n	8002eee <_printf_i+0x1ba>
 8002ef6:	8019      	strh	r1, [r3, #0]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6123      	str	r3, [r4, #16]
 8002efc:	4616      	mov	r6, r2
 8002efe:	e7bc      	b.n	8002e7a <_printf_i+0x146>
 8002f00:	6833      	ldr	r3, [r6, #0]
 8002f02:	1d1a      	adds	r2, r3, #4
 8002f04:	6032      	str	r2, [r6, #0]
 8002f06:	681e      	ldr	r6, [r3, #0]
 8002f08:	6862      	ldr	r2, [r4, #4]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f7fd f967 	bl	80001e0 <memchr>
 8002f12:	b108      	cbz	r0, 8002f18 <_printf_i+0x1e4>
 8002f14:	1b80      	subs	r0, r0, r6
 8002f16:	6060      	str	r0, [r4, #4]
 8002f18:	6863      	ldr	r3, [r4, #4]
 8002f1a:	6123      	str	r3, [r4, #16]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f22:	e7aa      	b.n	8002e7a <_printf_i+0x146>
 8002f24:	6923      	ldr	r3, [r4, #16]
 8002f26:	4632      	mov	r2, r6
 8002f28:	4649      	mov	r1, r9
 8002f2a:	4640      	mov	r0, r8
 8002f2c:	47d0      	blx	sl
 8002f2e:	3001      	adds	r0, #1
 8002f30:	d0ad      	beq.n	8002e8e <_printf_i+0x15a>
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	079b      	lsls	r3, r3, #30
 8002f36:	d413      	bmi.n	8002f60 <_printf_i+0x22c>
 8002f38:	68e0      	ldr	r0, [r4, #12]
 8002f3a:	9b03      	ldr	r3, [sp, #12]
 8002f3c:	4298      	cmp	r0, r3
 8002f3e:	bfb8      	it	lt
 8002f40:	4618      	movlt	r0, r3
 8002f42:	e7a6      	b.n	8002e92 <_printf_i+0x15e>
 8002f44:	2301      	movs	r3, #1
 8002f46:	4632      	mov	r2, r6
 8002f48:	4649      	mov	r1, r9
 8002f4a:	4640      	mov	r0, r8
 8002f4c:	47d0      	blx	sl
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d09d      	beq.n	8002e8e <_printf_i+0x15a>
 8002f52:	3501      	adds	r5, #1
 8002f54:	68e3      	ldr	r3, [r4, #12]
 8002f56:	9903      	ldr	r1, [sp, #12]
 8002f58:	1a5b      	subs	r3, r3, r1
 8002f5a:	42ab      	cmp	r3, r5
 8002f5c:	dcf2      	bgt.n	8002f44 <_printf_i+0x210>
 8002f5e:	e7eb      	b.n	8002f38 <_printf_i+0x204>
 8002f60:	2500      	movs	r5, #0
 8002f62:	f104 0619 	add.w	r6, r4, #25
 8002f66:	e7f5      	b.n	8002f54 <_printf_i+0x220>
 8002f68:	08003369 	.word	0x08003369
 8002f6c:	0800337a 	.word	0x0800337a

08002f70 <__sflush_r>:
 8002f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f78:	0716      	lsls	r6, r2, #28
 8002f7a:	4605      	mov	r5, r0
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	d454      	bmi.n	800302a <__sflush_r+0xba>
 8002f80:	684b      	ldr	r3, [r1, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc02      	bgt.n	8002f8c <__sflush_r+0x1c>
 8002f86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	dd48      	ble.n	800301e <__sflush_r+0xae>
 8002f8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f8e:	2e00      	cmp	r6, #0
 8002f90:	d045      	beq.n	800301e <__sflush_r+0xae>
 8002f92:	2300      	movs	r3, #0
 8002f94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002f98:	682f      	ldr	r7, [r5, #0]
 8002f9a:	6a21      	ldr	r1, [r4, #32]
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	d030      	beq.n	8003002 <__sflush_r+0x92>
 8002fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	0759      	lsls	r1, r3, #29
 8002fa6:	d505      	bpl.n	8002fb4 <__sflush_r+0x44>
 8002fa8:	6863      	ldr	r3, [r4, #4]
 8002faa:	1ad2      	subs	r2, r2, r3
 8002fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002fae:	b10b      	cbz	r3, 8002fb4 <__sflush_r+0x44>
 8002fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002fb2:	1ad2      	subs	r2, r2, r3
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002fb8:	6a21      	ldr	r1, [r4, #32]
 8002fba:	4628      	mov	r0, r5
 8002fbc:	47b0      	blx	r6
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	d106      	bne.n	8002fd2 <__sflush_r+0x62>
 8002fc4:	6829      	ldr	r1, [r5, #0]
 8002fc6:	291d      	cmp	r1, #29
 8002fc8:	d82b      	bhi.n	8003022 <__sflush_r+0xb2>
 8002fca:	4a2a      	ldr	r2, [pc, #168]	@ (8003074 <__sflush_r+0x104>)
 8002fcc:	40ca      	lsrs	r2, r1
 8002fce:	07d6      	lsls	r6, r2, #31
 8002fd0:	d527      	bpl.n	8003022 <__sflush_r+0xb2>
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	6062      	str	r2, [r4, #4]
 8002fd6:	04d9      	lsls	r1, r3, #19
 8002fd8:	6922      	ldr	r2, [r4, #16]
 8002fda:	6022      	str	r2, [r4, #0]
 8002fdc:	d504      	bpl.n	8002fe8 <__sflush_r+0x78>
 8002fde:	1c42      	adds	r2, r0, #1
 8002fe0:	d101      	bne.n	8002fe6 <__sflush_r+0x76>
 8002fe2:	682b      	ldr	r3, [r5, #0]
 8002fe4:	b903      	cbnz	r3, 8002fe8 <__sflush_r+0x78>
 8002fe6:	6560      	str	r0, [r4, #84]	@ 0x54
 8002fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fea:	602f      	str	r7, [r5, #0]
 8002fec:	b1b9      	cbz	r1, 800301e <__sflush_r+0xae>
 8002fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ff2:	4299      	cmp	r1, r3
 8002ff4:	d002      	beq.n	8002ffc <__sflush_r+0x8c>
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	f7ff fbf4 	bl	80027e4 <_free_r>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8003000:	e00d      	b.n	800301e <__sflush_r+0xae>
 8003002:	2301      	movs	r3, #1
 8003004:	4628      	mov	r0, r5
 8003006:	47b0      	blx	r6
 8003008:	4602      	mov	r2, r0
 800300a:	1c50      	adds	r0, r2, #1
 800300c:	d1c9      	bne.n	8002fa2 <__sflush_r+0x32>
 800300e:	682b      	ldr	r3, [r5, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0c6      	beq.n	8002fa2 <__sflush_r+0x32>
 8003014:	2b1d      	cmp	r3, #29
 8003016:	d001      	beq.n	800301c <__sflush_r+0xac>
 8003018:	2b16      	cmp	r3, #22
 800301a:	d11e      	bne.n	800305a <__sflush_r+0xea>
 800301c:	602f      	str	r7, [r5, #0]
 800301e:	2000      	movs	r0, #0
 8003020:	e022      	b.n	8003068 <__sflush_r+0xf8>
 8003022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003026:	b21b      	sxth	r3, r3
 8003028:	e01b      	b.n	8003062 <__sflush_r+0xf2>
 800302a:	690f      	ldr	r7, [r1, #16]
 800302c:	2f00      	cmp	r7, #0
 800302e:	d0f6      	beq.n	800301e <__sflush_r+0xae>
 8003030:	0793      	lsls	r3, r2, #30
 8003032:	680e      	ldr	r6, [r1, #0]
 8003034:	bf08      	it	eq
 8003036:	694b      	ldreq	r3, [r1, #20]
 8003038:	600f      	str	r7, [r1, #0]
 800303a:	bf18      	it	ne
 800303c:	2300      	movne	r3, #0
 800303e:	eba6 0807 	sub.w	r8, r6, r7
 8003042:	608b      	str	r3, [r1, #8]
 8003044:	f1b8 0f00 	cmp.w	r8, #0
 8003048:	dde9      	ble.n	800301e <__sflush_r+0xae>
 800304a:	6a21      	ldr	r1, [r4, #32]
 800304c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800304e:	4643      	mov	r3, r8
 8003050:	463a      	mov	r2, r7
 8003052:	4628      	mov	r0, r5
 8003054:	47b0      	blx	r6
 8003056:	2800      	cmp	r0, #0
 8003058:	dc08      	bgt.n	800306c <__sflush_r+0xfc>
 800305a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800305e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003062:	81a3      	strh	r3, [r4, #12]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800306c:	4407      	add	r7, r0
 800306e:	eba8 0800 	sub.w	r8, r8, r0
 8003072:	e7e7      	b.n	8003044 <__sflush_r+0xd4>
 8003074:	20400001 	.word	0x20400001

08003078 <_fflush_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	690b      	ldr	r3, [r1, #16]
 800307c:	4605      	mov	r5, r0
 800307e:	460c      	mov	r4, r1
 8003080:	b913      	cbnz	r3, 8003088 <_fflush_r+0x10>
 8003082:	2500      	movs	r5, #0
 8003084:	4628      	mov	r0, r5
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	b118      	cbz	r0, 8003092 <_fflush_r+0x1a>
 800308a:	6a03      	ldr	r3, [r0, #32]
 800308c:	b90b      	cbnz	r3, 8003092 <_fflush_r+0x1a>
 800308e:	f7ff faa1 	bl	80025d4 <__sinit>
 8003092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f3      	beq.n	8003082 <_fflush_r+0xa>
 800309a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800309c:	07d0      	lsls	r0, r2, #31
 800309e:	d404      	bmi.n	80030aa <_fflush_r+0x32>
 80030a0:	0599      	lsls	r1, r3, #22
 80030a2:	d402      	bmi.n	80030aa <_fflush_r+0x32>
 80030a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030a6:	f7ff fb9a 	bl	80027de <__retarget_lock_acquire_recursive>
 80030aa:	4628      	mov	r0, r5
 80030ac:	4621      	mov	r1, r4
 80030ae:	f7ff ff5f 	bl	8002f70 <__sflush_r>
 80030b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030b4:	07da      	lsls	r2, r3, #31
 80030b6:	4605      	mov	r5, r0
 80030b8:	d4e4      	bmi.n	8003084 <_fflush_r+0xc>
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	059b      	lsls	r3, r3, #22
 80030be:	d4e1      	bmi.n	8003084 <_fflush_r+0xc>
 80030c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030c2:	f7ff fb8d 	bl	80027e0 <__retarget_lock_release_recursive>
 80030c6:	e7dd      	b.n	8003084 <_fflush_r+0xc>

080030c8 <__swbuf_r>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	460e      	mov	r6, r1
 80030cc:	4614      	mov	r4, r2
 80030ce:	4605      	mov	r5, r0
 80030d0:	b118      	cbz	r0, 80030da <__swbuf_r+0x12>
 80030d2:	6a03      	ldr	r3, [r0, #32]
 80030d4:	b90b      	cbnz	r3, 80030da <__swbuf_r+0x12>
 80030d6:	f7ff fa7d 	bl	80025d4 <__sinit>
 80030da:	69a3      	ldr	r3, [r4, #24]
 80030dc:	60a3      	str	r3, [r4, #8]
 80030de:	89a3      	ldrh	r3, [r4, #12]
 80030e0:	071a      	lsls	r2, r3, #28
 80030e2:	d501      	bpl.n	80030e8 <__swbuf_r+0x20>
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	b943      	cbnz	r3, 80030fa <__swbuf_r+0x32>
 80030e8:	4621      	mov	r1, r4
 80030ea:	4628      	mov	r0, r5
 80030ec:	f000 f82a 	bl	8003144 <__swsetup_r>
 80030f0:	b118      	cbz	r0, 80030fa <__swbuf_r+0x32>
 80030f2:	f04f 37ff 	mov.w	r7, #4294967295
 80030f6:	4638      	mov	r0, r7
 80030f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	6922      	ldr	r2, [r4, #16]
 80030fe:	1a98      	subs	r0, r3, r2
 8003100:	6963      	ldr	r3, [r4, #20]
 8003102:	b2f6      	uxtb	r6, r6
 8003104:	4283      	cmp	r3, r0
 8003106:	4637      	mov	r7, r6
 8003108:	dc05      	bgt.n	8003116 <__swbuf_r+0x4e>
 800310a:	4621      	mov	r1, r4
 800310c:	4628      	mov	r0, r5
 800310e:	f7ff ffb3 	bl	8003078 <_fflush_r>
 8003112:	2800      	cmp	r0, #0
 8003114:	d1ed      	bne.n	80030f2 <__swbuf_r+0x2a>
 8003116:	68a3      	ldr	r3, [r4, #8]
 8003118:	3b01      	subs	r3, #1
 800311a:	60a3      	str	r3, [r4, #8]
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	6022      	str	r2, [r4, #0]
 8003122:	701e      	strb	r6, [r3, #0]
 8003124:	6962      	ldr	r2, [r4, #20]
 8003126:	1c43      	adds	r3, r0, #1
 8003128:	429a      	cmp	r2, r3
 800312a:	d004      	beq.n	8003136 <__swbuf_r+0x6e>
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	07db      	lsls	r3, r3, #31
 8003130:	d5e1      	bpl.n	80030f6 <__swbuf_r+0x2e>
 8003132:	2e0a      	cmp	r6, #10
 8003134:	d1df      	bne.n	80030f6 <__swbuf_r+0x2e>
 8003136:	4621      	mov	r1, r4
 8003138:	4628      	mov	r0, r5
 800313a:	f7ff ff9d 	bl	8003078 <_fflush_r>
 800313e:	2800      	cmp	r0, #0
 8003140:	d0d9      	beq.n	80030f6 <__swbuf_r+0x2e>
 8003142:	e7d6      	b.n	80030f2 <__swbuf_r+0x2a>

08003144 <__swsetup_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4b29      	ldr	r3, [pc, #164]	@ (80031ec <__swsetup_r+0xa8>)
 8003148:	4605      	mov	r5, r0
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	460c      	mov	r4, r1
 800314e:	b118      	cbz	r0, 8003158 <__swsetup_r+0x14>
 8003150:	6a03      	ldr	r3, [r0, #32]
 8003152:	b90b      	cbnz	r3, 8003158 <__swsetup_r+0x14>
 8003154:	f7ff fa3e 	bl	80025d4 <__sinit>
 8003158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800315c:	0719      	lsls	r1, r3, #28
 800315e:	d422      	bmi.n	80031a6 <__swsetup_r+0x62>
 8003160:	06da      	lsls	r2, r3, #27
 8003162:	d407      	bmi.n	8003174 <__swsetup_r+0x30>
 8003164:	2209      	movs	r2, #9
 8003166:	602a      	str	r2, [r5, #0]
 8003168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800316c:	81a3      	strh	r3, [r4, #12]
 800316e:	f04f 30ff 	mov.w	r0, #4294967295
 8003172:	e033      	b.n	80031dc <__swsetup_r+0x98>
 8003174:	0758      	lsls	r0, r3, #29
 8003176:	d512      	bpl.n	800319e <__swsetup_r+0x5a>
 8003178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800317a:	b141      	cbz	r1, 800318e <__swsetup_r+0x4a>
 800317c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003180:	4299      	cmp	r1, r3
 8003182:	d002      	beq.n	800318a <__swsetup_r+0x46>
 8003184:	4628      	mov	r0, r5
 8003186:	f7ff fb2d 	bl	80027e4 <_free_r>
 800318a:	2300      	movs	r3, #0
 800318c:	6363      	str	r3, [r4, #52]	@ 0x34
 800318e:	89a3      	ldrh	r3, [r4, #12]
 8003190:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003194:	81a3      	strh	r3, [r4, #12]
 8003196:	2300      	movs	r3, #0
 8003198:	6063      	str	r3, [r4, #4]
 800319a:	6923      	ldr	r3, [r4, #16]
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	f043 0308 	orr.w	r3, r3, #8
 80031a4:	81a3      	strh	r3, [r4, #12]
 80031a6:	6923      	ldr	r3, [r4, #16]
 80031a8:	b94b      	cbnz	r3, 80031be <__swsetup_r+0x7a>
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80031b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031b4:	d003      	beq.n	80031be <__swsetup_r+0x7a>
 80031b6:	4621      	mov	r1, r4
 80031b8:	4628      	mov	r0, r5
 80031ba:	f000 f84f 	bl	800325c <__smakebuf_r>
 80031be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031c2:	f013 0201 	ands.w	r2, r3, #1
 80031c6:	d00a      	beq.n	80031de <__swsetup_r+0x9a>
 80031c8:	2200      	movs	r2, #0
 80031ca:	60a2      	str	r2, [r4, #8]
 80031cc:	6962      	ldr	r2, [r4, #20]
 80031ce:	4252      	negs	r2, r2
 80031d0:	61a2      	str	r2, [r4, #24]
 80031d2:	6922      	ldr	r2, [r4, #16]
 80031d4:	b942      	cbnz	r2, 80031e8 <__swsetup_r+0xa4>
 80031d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80031da:	d1c5      	bne.n	8003168 <__swsetup_r+0x24>
 80031dc:	bd38      	pop	{r3, r4, r5, pc}
 80031de:	0799      	lsls	r1, r3, #30
 80031e0:	bf58      	it	pl
 80031e2:	6962      	ldrpl	r2, [r4, #20]
 80031e4:	60a2      	str	r2, [r4, #8]
 80031e6:	e7f4      	b.n	80031d2 <__swsetup_r+0x8e>
 80031e8:	2000      	movs	r0, #0
 80031ea:	e7f7      	b.n	80031dc <__swsetup_r+0x98>
 80031ec:	2000001c 	.word	0x2000001c

080031f0 <_sbrk_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	4d06      	ldr	r5, [pc, #24]	@ (800320c <_sbrk_r+0x1c>)
 80031f4:	2300      	movs	r3, #0
 80031f6:	4604      	mov	r4, r0
 80031f8:	4608      	mov	r0, r1
 80031fa:	602b      	str	r3, [r5, #0]
 80031fc:	f7fd fd1c 	bl	8000c38 <_sbrk>
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d102      	bne.n	800320a <_sbrk_r+0x1a>
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	b103      	cbz	r3, 800320a <_sbrk_r+0x1a>
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	20000214 	.word	0x20000214

08003210 <__swhatbuf_r>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	460c      	mov	r4, r1
 8003214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003218:	2900      	cmp	r1, #0
 800321a:	b096      	sub	sp, #88	@ 0x58
 800321c:	4615      	mov	r5, r2
 800321e:	461e      	mov	r6, r3
 8003220:	da0d      	bge.n	800323e <__swhatbuf_r+0x2e>
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	bf14      	ite	ne
 800322e:	2340      	movne	r3, #64	@ 0x40
 8003230:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003234:	2000      	movs	r0, #0
 8003236:	6031      	str	r1, [r6, #0]
 8003238:	602b      	str	r3, [r5, #0]
 800323a:	b016      	add	sp, #88	@ 0x58
 800323c:	bd70      	pop	{r4, r5, r6, pc}
 800323e:	466a      	mov	r2, sp
 8003240:	f000 f848 	bl	80032d4 <_fstat_r>
 8003244:	2800      	cmp	r0, #0
 8003246:	dbec      	blt.n	8003222 <__swhatbuf_r+0x12>
 8003248:	9901      	ldr	r1, [sp, #4]
 800324a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800324e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003252:	4259      	negs	r1, r3
 8003254:	4159      	adcs	r1, r3
 8003256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800325a:	e7eb      	b.n	8003234 <__swhatbuf_r+0x24>

0800325c <__smakebuf_r>:
 800325c:	898b      	ldrh	r3, [r1, #12]
 800325e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003260:	079d      	lsls	r5, r3, #30
 8003262:	4606      	mov	r6, r0
 8003264:	460c      	mov	r4, r1
 8003266:	d507      	bpl.n	8003278 <__smakebuf_r+0x1c>
 8003268:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800326c:	6023      	str	r3, [r4, #0]
 800326e:	6123      	str	r3, [r4, #16]
 8003270:	2301      	movs	r3, #1
 8003272:	6163      	str	r3, [r4, #20]
 8003274:	b003      	add	sp, #12
 8003276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003278:	ab01      	add	r3, sp, #4
 800327a:	466a      	mov	r2, sp
 800327c:	f7ff ffc8 	bl	8003210 <__swhatbuf_r>
 8003280:	9f00      	ldr	r7, [sp, #0]
 8003282:	4605      	mov	r5, r0
 8003284:	4639      	mov	r1, r7
 8003286:	4630      	mov	r0, r6
 8003288:	f7ff fb18 	bl	80028bc <_malloc_r>
 800328c:	b948      	cbnz	r0, 80032a2 <__smakebuf_r+0x46>
 800328e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003292:	059a      	lsls	r2, r3, #22
 8003294:	d4ee      	bmi.n	8003274 <__smakebuf_r+0x18>
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	f043 0302 	orr.w	r3, r3, #2
 800329e:	81a3      	strh	r3, [r4, #12]
 80032a0:	e7e2      	b.n	8003268 <__smakebuf_r+0xc>
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	6020      	str	r0, [r4, #0]
 80032a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	9b01      	ldr	r3, [sp, #4]
 80032ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80032b2:	b15b      	cbz	r3, 80032cc <__smakebuf_r+0x70>
 80032b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032b8:	4630      	mov	r0, r6
 80032ba:	f000 f81d 	bl	80032f8 <_isatty_r>
 80032be:	b128      	cbz	r0, 80032cc <__smakebuf_r+0x70>
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	81a3      	strh	r3, [r4, #12]
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	431d      	orrs	r5, r3
 80032d0:	81a5      	strh	r5, [r4, #12]
 80032d2:	e7cf      	b.n	8003274 <__smakebuf_r+0x18>

080032d4 <_fstat_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4d07      	ldr	r5, [pc, #28]	@ (80032f4 <_fstat_r+0x20>)
 80032d8:	2300      	movs	r3, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	602b      	str	r3, [r5, #0]
 80032e2:	f7fd fc80 	bl	8000be6 <_fstat>
 80032e6:	1c43      	adds	r3, r0, #1
 80032e8:	d102      	bne.n	80032f0 <_fstat_r+0x1c>
 80032ea:	682b      	ldr	r3, [r5, #0]
 80032ec:	b103      	cbz	r3, 80032f0 <_fstat_r+0x1c>
 80032ee:	6023      	str	r3, [r4, #0]
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	bf00      	nop
 80032f4:	20000214 	.word	0x20000214

080032f8 <_isatty_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4d06      	ldr	r5, [pc, #24]	@ (8003314 <_isatty_r+0x1c>)
 80032fc:	2300      	movs	r3, #0
 80032fe:	4604      	mov	r4, r0
 8003300:	4608      	mov	r0, r1
 8003302:	602b      	str	r3, [r5, #0]
 8003304:	f7fd fc7f 	bl	8000c06 <_isatty>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_isatty_r+0x1a>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_isatty_r+0x1a>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	20000214 	.word	0x20000214

08003318 <_init>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr

08003324 <_fini>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	bf00      	nop
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr
